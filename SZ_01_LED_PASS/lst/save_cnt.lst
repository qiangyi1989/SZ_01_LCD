C51 COMPILER V9.00   SAVE_CNT                                                              04/09/2016 11:07:34 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE SAVE_CNT
OBJECT MODULE PLACED IN .\out\save_cnt.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil\C51\BIN\C51.EXE save_cnt.c BROWSE DEBUG OBJECTEXTEND PRINT(.\lst\save_c
                    -nt.lst) OBJECT(.\out\save_cnt.obj)

line level    source

   1          
   2          #include "save_cnt.h"
   3          
   4          //保存插引次数
   5          void save_sys_lock(void)
   6          {
   7   1      #if 1
   8   1      unsigned char *progbyte,i;
   9   1      unsigned int progadd = EEPROM_LOCK_VAL;
  10   1      unsigned long add_index,temp_32;
  11   1      unsigned int over_num = 0;
  12   1      
  13   1              add_index = public_val.work_count - 1;
  14   1              over_num = add_index>>7;
  15   1      //      if(over_num >= 5) over_num = 0;  //最多存5个区
  16   1              over_num %= 5;
  17   1              
  18   1              if(!(add_index % 0x80))      //128个满一个区
  19   1                      {
  20   2                              eeprom_en = 0xaa;
  21   2                              IapEraseSector(EEPROM_LOCK_VAL + (over_num << 9)); //擦除新存的区
  22   2                              eeprom_en = 0;  
  23   2                      }
  24   1              temp_32 = add_index << 2; //一个序号存四个字节
  25   1              temp_32 %= 0xA00;
  26   1      
  27   1              progadd += (unsigned int)temp_32;         //根据锁机时间计算偏移地址
  28   1              progbyte = (unsigned char *)&public_val.work_count;
  29   1      
  30   1              //SendData(*(progbyte));
  31   1              eeprom_en = 0xaa;
  32   1              for(i = 0; i < 4; i++)       //插饼次数存储
  33   1                      {
  34   2                              IapProgramByte(progadd,*(progbyte));
  35   2                              //SendData(*(progbyte));
  36   2                              progbyte++;
  37   2                              progadd++;
  38   2                      }
  39   1              eeprom_en = 0;  
  40   1      #endif  
  41   1      }
  42          
  43          
  44          
  45          //读取锁机时间
  46          void read_loack_count(void)
  47          {
  48   1      #if MENU_PASS_ON
  49   1      unsigned char *progbyte,i_pr;
  50   1      unsigned int progadd = EEPROM_LOCK_VAL;
  51   1      unsigned long read_word[3],max_val = 0,max_idx = 10000;
  52   1      unsigned long ver_data[3],max_ver_data[2];
  53   1      unsigned int i;
  54   1              for(i = 0; i < 640; i++) //遍历存储区,找出最大值所有序号
C51 COMPILER V9.00   SAVE_CNT                                                              04/09/2016 11:07:34 PAGE 2   

  55   1                      {
  56   2                              progadd = EEPROM_LOCK_VAL + (i<<2);         //根据运行分钟数计算偏移地址
  57   2                              progbyte = (unsigned char *)&read_word[0];
  58   2                              *progbyte = IapReadByte(progadd);
  59   2      //if(public_val.Disp_Dz_00123[0])
  60   2      //                      SendData(*(progbyte));
  61   2                              progbyte++;
  62   2                              *progbyte = IapReadByte(progadd+1);
  63   2      //if(public_val.Disp_Dz_00123[0])
  64   2      //                      SendData(*(progbyte));
  65   2                              progbyte++;
  66   2                              *progbyte = IapReadByte(progadd+2);
  67   2      //if(public_val.Disp_Dz_00123[0])
  68   2      //                      SendData(*(progbyte));
  69   2                              progbyte++;
  70   2                              *progbyte = IapReadByte(progadd+3);
  71   2      //if(public_val.Disp_Dz_00123[0])
  72   2      //                      SendData(*(progbyte));
  73   2                              ver_data[0] = ver_data[1];
  74   2                              ver_data[1] = read_word[0];
  75   2                              if(i == 639)
  76   2                                      ver_data[2] = read_word[0];   //首尾跨接的情况
  77   2                              if(read_word[0] <= 0x7FFFFFFF)
  78   2                                      {
  79   3                                              if(read_word[0] > max_val)
  80   3                                                      {
  81   4                                                              max_ver_data[0] = ver_data[0];
  82   4                                                              max_ver_data[1] = ver_data[1];                                                  
  83   4                                                              max_val = read_word[0];
  84   4                                                              max_idx = i;
  85   4                                                              if(max_idx == 0)  //首数据为最大值的情况
  86   4                                                                      {
  87   5                                                                              max_ver_data[0] = ver_data[2];
  88   5                                                                      }
  89   4                                                      }
  90   3                                      }
  91   2                              
  92   2                              read_word[1] = read_word[0];
  93   2                      }
  94   1      
  95   1              public_val.Lock_Flag = 0;
  96   1              if(max_idx != 10000)  //有锁机数据
  97   1                      {
  98   2                              if(max_ver_data[1] - max_ver_data[0] == 1)
  99   2                                      {
 100   3                                              public_val.work_count = max_val;
 101   3                                      }
 102   2                              else
 103   2                                      {
 104   3                                              public_val.work_count = 0;
 105   3                                              //save_sys_lock();
 106   3                                      }
 107   2                      }
 108   1              else
 109   1                      {
 110   2                              public_val.work_count = 0;
 111   2                              save_sys_lock();
 112   2                      }
 113   1      #endif          
 114   1      }
*** WARNING C280 IN LINE 49 OF SAVE_CNT.C: 'i_pr': unreferenced local variable
 115          
C51 COMPILER V9.00   SAVE_CNT                                                              04/09/2016 11:07:34 PAGE 3   

 116          //读取清零计数
 117          void read_user_count(void)
 118          {
 119   1      #if 1
 120   1      unsigned char *progbyte;
 121   1      unsigned int progadd = EEPROM_USER_COUNT;
 122   1              progbyte = (unsigned char *)&public_val.work_count_user;
 123   1              *progbyte = IapReadByte(progadd);
 124   1      //if(public_val.Disp_Dz_00123[0])
 125   1      //      SendData(*(progbyte));
 126   1              progbyte++;
 127   1              *progbyte = IapReadByte(progadd+1);
 128   1      //if(public_val.Disp_Dz_00123[0])
 129   1      //      SendData(*(progbyte));
 130   1              progbyte++;
 131   1              *progbyte = IapReadByte(progadd+2);
 132   1      //if(public_val.Disp_Dz_00123[0])
 133   1      //      SendData(*(progbyte));
 134   1              progbyte++;
 135   1              *progbyte = IapReadByte(progadd+3);
 136   1      //if(public_val.Disp_Dz_00123[0])
 137   1      //      SendData(*(progbyte));
 138   1      
 139   1              if(public_val.work_count - public_val.work_count_user > 99999)
 140   1                      {
 141   2                              public_val.work_count_user = public_val.work_count;
 142   2                              save_user_count();
 143   2                      }
 144   1      #endif          
 145   1      }
 146          
 147          
 148          
 149          //保存用户清零计数值
 150          void save_user_count(void)
 151          {
 152   1      #if 1
 153   1      unsigned char *progbyte,i;
 154   1      unsigned int progadd = EEPROM_USER_COUNT;
 155   1      unsigned long add_index,temp_32;
 156   1      unsigned int over_num = 0;
 157   1      
 158   1              eeprom_en = 0xaa;
 159   1              IapEraseSector(EEPROM_USER_COUNT); //擦除数据区
 160   1              eeprom_en = 0;  
 161   1      
 162   1              public_val.work_count_user = public_val.work_count;
 163   1              progbyte = (unsigned char *)&public_val.work_count_user;
 164   1      
 165   1              //SendData(*(progbyte));
 166   1              eeprom_en = 0xaa;
 167   1              for(i = 0; i < 4; i++)       //插饼次数存储
 168   1                      {
 169   2                              IapProgramByte(progadd,*(progbyte));
 170   2                              //SendData(*(progbyte));
 171   2                              progbyte++;
 172   2                              progadd++;
 173   2                      }
 174   1              eeprom_en = 0;  
 175   1      #endif  
 176   1      }
*** WARNING C280 IN LINE 155 OF SAVE_CNT.C: 'add_index': unreferenced local variable
C51 COMPILER V9.00   SAVE_CNT                                                              04/09/2016 11:07:34 PAGE 4   

*** WARNING C280 IN LINE 155 OF SAVE_CNT.C: 'temp_32': unreferenced local variable
 177          
 178          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    989    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      83
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
