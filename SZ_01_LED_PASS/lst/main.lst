C51 COMPILER V9.00   MAIN                                                                  05/12/2016 15:16:38 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\out\main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\lst\main.lst) OBJECT(.\out\m
                    -ain.obj)

line level    source

   1          #include "led_display.h"
   2          #include "sys.h"
   3          //#include"led.h"       
   4          #include "eeprom.h"
   5          #include "uart.h"
   6          #include "global.h"
   7          #include "main.h"
   8          #include <string.h>
   9          
  10          //#define uint unsigned int
  11          //#define uchar unsigned char
  12          
  13          
  14          #define FOSC 11059200L
  15          
  16          #define T1MS (65536-FOSC/12/1000) //12T模式
  17          
  18          
  19          extern xdata public_stru public_val;
  20          
  21          char eeprom_en = 0;
  22          int iInitCnt = 0;
  23          
  24          /* 下行发送的帧类型 */
  25          //char send_frame_type = 0xff;
  26          char send_frame_type = UP_REPLY_DONE;
  27          
  28          unsigned int cnt_read_state = 0;
  29          unsigned int cnt_read_param = 0;
  30          unsigned int cnt_read_param_range = 0;
  31          
  32          char already_read_param = 0;             /* 是否已读到配置参数:1已读到，0未读到 */
  33          //char send_read_param_flag = 0;       /* 是否已发送 */
  34          
  35          char already_read_param_range = 0;   /* 是否已读到配置参数范围:1已读到，0未读到 */
  36          
  37          char write_param_flag = 0;           /* 当前是否要写配置参数到主板:1需要，0不需要 */
  38          
  39          char write_test_mode_flag = 0;       /* 当前是否要写测试模式到主板:1需要，0不需要 */
  40          
  41          char write_learn_mode_flag = 0;      /* 当前是否要写学习模式到主板:1需要，0不需要 */
  42          
  43          char write_speed_mode_flag = 0;      /* 当前是否要写速度模式到主板:1需要，0不需要 */
  44          
  45          char write_warning_flag = 0;         /* 当前是否要写报警消息到主板:1需要，0不需要 */
  46          
  47          char write_clear_cnt_flag = 0;       /* 当前是否要写清除已出筒数到主板:1需要，0不需要 */
  48          char main_borad_finish_clear = 1;    /* 主板收到清除命令后已完成计数清零:1已完成，0未完成 */
  49          
  50          char write_key_flag = 0;             /* 当前是否要写按键到主板:1需要，0不需要 */
  51          
  52          char start_com_flag = 0;             /* 操作板开始串口通信的标志: 1开始，0未开始 */
  53          
  54          unsigned int usLongDownFlag = 0;     /* 长按下标志: 0未按下，1已按下 */
C51 COMPILER V9.00   MAIN                                                                  05/12/2016 15:16:38 PAGE 2   

  55          
  56          
  57          xdata _T_CHECK_EDGE2 t_FzFwKey = { 
  58                                                                          KEY_IO9_FZ_FW_MASK,
  59                                                                          888, 
  60                                                                          0, 
  61                                                                          0,
  62                                                                          0};
  63          
  64          xdata _T_CHECK_EDGE2 t_FzBwKey = { 
  65                                                                          KEY_RED_FZ_BW_MASK,
  66                                                                          888,  
  67                                                                          0, 
  68                                                                          0,
  69                                                                          0};
  70          
  71          
  72          xdata _T_CHECK_EDGE2 t_PaperFwKey = { //(unsigned short const *)&(unKey.all),
  73                                                                          KEY_IO1_PAPER_FW_MASK,
  74                                                                          888, 
  75                                                                          //40, 
  76                                                                          //500, 
  77                                                                          0, 
  78                                                                          0,
  79                                                                          0};
  80          
  81          xdata _T_CHECK_EDGE2 t_PaperBwKey = { 
  82                                                                          KEY_IO2_PAPER_BW_MASK,
  83                                                                          888,  
  84                                                                          0, 
  85                                                                          0,
  86                                                                          0};
  87          
  88          xdata _T_CHECK_EDGE2 t_CutKey = { 
  89                                                                          KEY_IO3_CUT_MASK,
  90                                                                          888,  
  91                                                                          0, 
  92                                                                          0,
  93                                                                          0};
  94          
  95          xdata _T_CHECK_EDGE2 t_PaperDownKey = { 
  96                                                                          KEY_IO4_PAPER_DOWN_MASK,
  97                                                                          888,  
  98                                                                          0, 
  99                                                                          0,
 100                                                                          0};
 101          
 102          xdata _T_CHECK_EDGE2 t_RollKey = { 
 103                                                                          KEY_IO5_ROLL_MASK,
 104                                                                          888,  
 105                                                                          0, 
 106                                                                          0,
 107                                                                          0};
 108          
 109          #if 0
              //pwm
              void Timer0Init(void)
              {
                  AUXR |= 0x80;                       //定时器0为1T模式
              //  AUXR &= 0x7f;                       //定时器0为12T模式
              
                  TMOD = 0x00;                    //设置定时器为模式0(16位自动重装载)
C51 COMPILER V9.00   MAIN                                                                  05/12/2016 15:16:38 PAGE 3   

              
                      //TL0 = 0xfd;                     //初始化计时值
                  TL0 = ZL_PWM_FREQ;                        /* 初始化为直流电机的PWM频率248 by james */
                  
                  TH0 = 0xff;
                  TR0 = 1;                        //定时器0开始计时
               //   ET0 = 1;                        //使能定时器0中断
              }
              
              void Timer1Init(void)
              {
                  AUXR |= 0x40;                //定时器1为1T模式
                      TMOD &= 0x0f;           //设置定时器模式
                      TL1 = 0xCB;             //设置定时初值
                      TH1 = 0xD4;         //设置定时初值
                      TF1 = 0;                //清除TF0标志
                  IP |= 0x08;
              //      TR1 = 1;                //定时器0开始计时
              }
              
              void Timer2Init(void)
              {
                  AUXR |= 0x04;
                  T2L = 0xCB;                     //初始化计时值
                  T2H = 0xD4;
                  AUXR |= 0x10;                   //定时器2开始计时
              }
              
              
              void sys_init(void)                //系统初始化函数
              {
                P2M1 = 0x01;
                P2M0 = 0xC1; //11000001
                
                P3M1 = 0x00;
                P3M0 = 0x6B; //01101011
              
                P1M1 = 0x00;
                P1M0 = 0x04; //00000100
              
                
                P0 = 0xff;             //io口初始化
                P1 = 0xff;
                P2 = 0xff;
                P3 = 0x9f;             //步进电机初始化为不使能 
                
                //Timer0Init();  // pwm
                //Timer2Init();  // 1ms主逻辑中断
                
                //pwm_init();
              
                //Timer1Init();  // 步进脉冲翻转
                
              }
              
              #endif
 173          
 174          
 175          void Timer0Init(void)
 176          {
 177   1          AUXR |= 0x80;                       //定时器0为1T模式
 178   1      //  AUXR &= 0x7f;                       //定时器0为12T模式
C51 COMPILER V9.00   MAIN                                                                  05/12/2016 15:16:38 PAGE 4   

 179   1      
 180   1          TMOD = 0x00;                    //设置定时器为模式0(16位自动重装载)
 181   1          TL0 = T1MS;                     //初始化计时值
 182   1          TH0 = T1MS >> 8;
 183   1          TR0 = 1;                        //定时器0开始计时
 184   1          ET0 = 1;                        //使能定时器0中断
 185   1          EA = 1;
 186   1      }
 187          
 188          void sys_init(void)                //系统初始化函数
 189          {
 190   1              P2M1 = 0x00;
 191   1              P2M0 = 0x20;
 192   1      
 193   1              P0 = 0xff;             //io口初始化
 194   1              P1 = 0xff;
 195   1              P2 = 0xff;
 196   1              P3 = 0xff; 
 197   1      
 198   1              Timer0Init();
 199   1              uart_init();
 200   1              
 201   1      #ifndef LED_DISP
 202   1              uart2_init(); 
 203   1      #endif  
 204   1        
 205   1      }
 206          
 207          
 208          void GlobalInit()
 209          {
 210   1              memset(&public_val, 0, sizeof(public_val));     
 211   1      
 212   1              speed_mode = 1;  // 高速模式
 213   1      }
 214          
 215          
 216          
 217          
 218          ///踏板长按识别
 219          
 220          #if 1
 221          void CheckKeyClick(_T_CHECK_EDGE2 *p)
 222          {
 223   1              switch(p->us_logStep)
 224   1              {
 225   2              case 0:
 226   2                      
 227   2                      p->us_finishFlag = 0;
 228   2                      if( !(unKey.all & p->us_inMask) )                                                                               
 229   2                      {
 230   3                              p->us_logStep = 10;
 231   3                              p->us_DownCnt = 0;
 232   3                      }
 233   2                      
 234   2                      break;
 235   2                      
 236   2              case 10:
 237   2      
 238   2                      if( !(unKey.all & p->us_inMask) )                                                                               
 239   2                      {
 240   3                              p->us_DownCnt++;
C51 COMPILER V9.00   MAIN                                                                  05/12/2016 15:16:38 PAGE 5   

 241   3                              if(p->us_DownCnt > KEY_JIT_DELAY)                       ///<按下                                                
 242   3                              {
 243   4                                      //p->us_finishFlag = FOOT_DOWN_FLAG;   
 244   4      
 245   4                                      p->us_logStep = 20;   
 246   4                              }
 247   3                      }
 248   2                      else
 249   2                      {
 250   3                              p->us_DownCnt = 0;
 251   3                              p->us_logStep = 0;
 252   3                      }
 253   2                      
 254   2                      break;  
 255   2                      
 256   2              case 20:
 257   2                      
 258   2                      p->us_DownCnt++;
 259   2                      
 260   2                      if (unKey.all & p->us_inMask)   
 261   2                      {
 262   3                              p->us_logStep = 30;
 263   3                              p->us_UpCnt = 0;
 264   3                      }
 265   2      
 266   2                      if (p->us_DownCnt > KEY_LONG_DELAY)
 267   2                      {
 268   3                              p->us_finishFlag = KEY_LONG_DOWN_FLAG;   /* 判为长按按下 */   
 269   3      
 270   3                              //p->us_logStep = 30;
 271   3                      }
 272   2                      
 273   2                      break;
 274   2      
 275   2              case 30:
 276   2      
 277   2                      p->us_DownCnt++;
 278   2      
 279   2                      if (unKey.all & p->us_inMask)    
 280   2                      {
 281   3                              p->us_UpCnt++;
 282   3                              if(p->us_UpCnt > KEY_JIT_DELAY)   /* 弹起 */                                                                    
 283   3                              {
 284   4                                      //if (p->us_DownCnt > KEY_LONG_DELAY)     
 285   4                                      if (p->us_finishFlag == KEY_LONG_DOWN_FLAG)
 286   4                                      {
 287   5                                              p->us_finishFlag = KEY_LONG_UP_FLAG;   /* 判为长按抬起 */   
 288   5                                      }
 289   4                                      else
 290   4                                      {
 291   5                                              p->us_finishFlag = KEY_SHORT_UP_FLAG;  /* 判为短按 */
 292   5                                      }
 293   4      
 294   4                                      p->us_DownCnt = 0;                              
 295   4                                      p->us_logStep = 888;                            
 296   4                              }
 297   3                      }
 298   2                      else
 299   2                      {
 300   3                              p->us_UpCnt = 0;
 301   3                              p->us_logStep = 20;
 302   3                      }
C51 COMPILER V9.00   MAIN                                                                  05/12/2016 15:16:38 PAGE 6   

 303   2                      
 304   2                      break;
 305   2                      
 306   2              }
 307   1              
 308   1      }
 309          
 310          #else
              
              void CheckKeyClick(_T_CHECK_EDGE2 *p)
              {
                      switch(p->us_logStep)
                      {
                      case 0:
                              
                              p->us_finishFlag = 0;
                              if( !(unKey.all & p->us_inMask) )                                                                               
                              {
                                      p->us_logStep = 10;
                                      p->us_DownCnt = 0;
                              }
                              
                              break;
                              
                      case 10:
              
                              if( !(unKey.all & p->us_inMask) )                                                                               
                              {
                                      p->us_DownCnt++;
                                      if(p->us_DownCnt > KEY_JIT_DELAY)                       ///<按下                                                
                                      {
                                              p->us_finishFlag = KEY_LONG_DOWN_FLAG;   /* 判为长按按下 */     
              
                                              p->us_DownCnt = 0;
                                              p->us_logStep = 20;   
                                      }
                              }
                              else
                              {
                                      p->us_DownCnt = 0;
                                      p->us_logStep = 0;
                              }
                              
                              break;  
                              
                      case 20:                
                              
                              if (unKey.all & p->us_inMask)   
                              {
                                      p->us_logStep = 30;
                                      p->us_UpCnt = 0;
                              }
                              
                              break;
              
                      case 30:
              
                              if (unKey.all & p->us_inMask)    
                              {
                                      p->us_UpCnt++;
                                      if(p->us_UpCnt > KEY_JIT_DELAY)   /* 弹起 */                                                                    
                                      {
C51 COMPILER V9.00   MAIN                                                                  05/12/2016 15:16:38 PAGE 7   

                                              p->us_finishFlag = KEY_LONG_UP_FLAG;   /* 判为长按抬起 */   
              
                                              p->us_UpCnt = 0;                                
                                              p->us_logStep = 888;                            
                                      }
                              }
                              else
                              {
                                      p->us_UpCnt = 0;
                                      p->us_logStep = 20;
                              }
                              
                              break;
                              
                      }
                      
              }
              
              #endif
 384          
 385          
 386          void key_detect()
 387          {       
 388   1              CheckKeyClick(&t_PaperFwKey);
 389   1              CheckKeyClick(&t_PaperBwKey);
 390   1              //CheckKeyClick(&t_CutKey);     
 391   1              CheckKeyClick(&t_PaperDownKey); 
 392   1              CheckKeyClick(&t_RollKey);      
 393   1              CheckKeyClick(&t_FzFwKey);              
 394   1              CheckKeyClick(&t_FzBwKey);              
 395   1      }
 396          
 397          void start_key_detect()
 398          {
 399   1              t_PaperFwKey.us_logStep = 0;
 400   1              t_PaperBwKey.us_logStep = 0;
 401   1              //t_CutKey.us_logStep = 0;
 402   1              t_PaperDownKey.us_logStep = 0;
 403   1              t_RollKey.us_logStep = 0;       
 404   1              t_FzFwKey.us_logStep = 0;
 405   1              t_FzBwKey.us_logStep = 0;       
 406   1      }
 407          
 408          void judge_key()
 409          {
 410   1              // 发纸
 411   1              if (t_FzFwKey.us_finishFlag != 0) 
 412   1              {
 413   2                      gsKeyVal = KEY_IO9;
 414   2                      
 415   2                      if (t_FzFwKey.us_finishFlag == KEY_LONG_DOWN_FLAG)     /* 长按 */
 416   2                      {                       
 417   3                              gcKeyType = KEY_LONG_DOWN_FLAG;  
 418   3      
 419   3                              if (usLongDownFlag == 0)
 420   3                              {
 421   4                                      usLongDownFlag = 1;
 422   4      
 423   4                                      write_key_flag = 1;   /* 有按键，需要写按键到主板 */
 424   4                              }
 425   3                      }
 426   2                      else if (t_FzFwKey.us_finishFlag == KEY_SHORT_UP_FLAG) /* 短按 */
C51 COMPILER V9.00   MAIN                                                                  05/12/2016 15:16:38 PAGE 8   

 427   2                      {
 428   3                              gcKeyType = KEY_SHORT_UP_FLAG;   
 429   3      
 430   3                              t_FzFwKey.us_finishFlag = 0;
 431   3                              t_FzFwKey.us_logStep = 0;                       
 432   3      
 433   3                              usLongDownFlag = 0;   /* 清长按标志 */
 434   3      
 435   3                              write_key_flag = 1;   /* 有按键，需要写按键到主板 */                    
 436   3                      }
 437   2                      else                                                       /* 长按抬起 */
 438   2                      {
 439   3                              gcKeyType = KEY_LONG_UP_FLAG;   
 440   3      
 441   3                              t_FzFwKey.us_finishFlag = 0;
 442   3                              t_FzFwKey.us_logStep = 0;                       
 443   3      
 444   3                              usLongDownFlag = 0;   /* 清长按标志 */
 445   3      
 446   3                              write_key_flag = 1;   /* 有按键，需要写按键到主板 */                    
 447   3                      }       
 448   2              }
 449   1      
 450   1              // 收纸
 451   1              if (t_FzBwKey.us_finishFlag != 0) 
 452   1              {
 453   2                      gsKeyVal = KEY_RED;
 454   2                      
 455   2                      if (t_FzBwKey.us_finishFlag == KEY_LONG_DOWN_FLAG)     /* 长按 */
 456   2                      {                       
 457   3                              gcKeyType = KEY_LONG_DOWN_FLAG;  
 458   3      
 459   3                              if (usLongDownFlag == 0)
 460   3                              {
 461   4                                      usLongDownFlag = 1;
 462   4      
 463   4                                      write_key_flag = 1;   /* 有按键，需要写按键到主板 */
 464   4                              }
 465   3                      }
 466   2                      else if (t_FzBwKey.us_finishFlag == KEY_SHORT_UP_FLAG) /* 短按 */
 467   2                      {
 468   3                              gcKeyType = KEY_SHORT_UP_FLAG;   
 469   3      
 470   3                              t_FzBwKey.us_finishFlag = 0;
 471   3                              t_FzBwKey.us_logStep = 0;                       
 472   3      
 473   3                              usLongDownFlag = 0;   /* 清长按标志 */
 474   3      
 475   3                              write_key_flag = 1;   /* 有按键，需要写按键到主板 */                    
 476   3                      }
 477   2                      else                                                       /* 长按抬起 */
 478   2                      {
 479   3                              gcKeyType = KEY_LONG_UP_FLAG;   
 480   3      
 481   3                              t_FzBwKey.us_finishFlag = 0;
 482   3                              t_FzBwKey.us_logStep = 0;                       
 483   3      
 484   3                              usLongDownFlag = 0;   /* 清长按标志 */
 485   3      
 486   3                              write_key_flag = 1;   /* 有按键，需要写按键到主板 */                    
 487   3                      }       
 488   2              }
C51 COMPILER V9.00   MAIN                                                                  05/12/2016 15:16:38 PAGE 9   

 489   1      
 490   1      
 491   1              
 492   1              /* 进纸 */
 493   1              if (t_PaperFwKey.us_finishFlag != 0) 
 494   1              {
 495   2                      gsKeyVal = KEY_IO1;
 496   2                      
 497   2                      if (t_PaperFwKey.us_finishFlag == KEY_LONG_DOWN_FLAG)     /* 长按 */
 498   2                      {                       
 499   3                              gcKeyType = KEY_LONG_DOWN_FLAG;  
 500   3      
 501   3                              if (usLongDownFlag == 0)
 502   3                              {
 503   4                                      usLongDownFlag = 1;
 504   4      
 505   4                                      write_key_flag = 1;   /* 有按键，需要写按键到主板 */
 506   4                              }
 507   3                      }
 508   2                      else if (t_PaperFwKey.us_finishFlag == KEY_SHORT_UP_FLAG) /* 短按 */
 509   2                      {
 510   3                              gcKeyType = KEY_SHORT_UP_FLAG;   
 511   3      
 512   3                              t_PaperFwKey.us_finishFlag = 0;
 513   3                              t_PaperFwKey.us_logStep = 0;                    
 514   3      
 515   3                              usLongDownFlag = 0;   /* 清长按标志 */
 516   3      
 517   3                              write_key_flag = 1;   /* 有按键，需要写按键到主板 */                    
 518   3                      }
 519   2                      else                                                       /* 长按抬起 */
 520   2                      {
 521   3                              gcKeyType = KEY_LONG_UP_FLAG;   
 522   3      
 523   3                              t_PaperFwKey.us_finishFlag = 0;
 524   3                              t_PaperFwKey.us_logStep = 0;                    
 525   3      
 526   3                              usLongDownFlag = 0;   /* 清长按标志 */
 527   3      
 528   3                              write_key_flag = 1;   /* 有按键，需要写按键到主板 */                    
 529   3                      }       
 530   2              }
 531   1      
 532   1              /* 退纸 */      
 533   1              if (t_PaperBwKey.us_finishFlag != 0) 
 534   1              {
 535   2                      gsKeyVal = KEY_IO2;
 536   2                      
 537   2                      if (t_PaperBwKey.us_finishFlag == KEY_LONG_DOWN_FLAG)     /* 长按 */
 538   2                      {                       
 539   3                              gcKeyType = KEY_LONG_DOWN_FLAG;  
 540   3      
 541   3                              if (usLongDownFlag == 0)
 542   3                              {
 543   4                                      usLongDownFlag = 1;
 544   4      
 545   4                                      write_key_flag = 1;   /* 有按键，需要写按键到主板 */
 546   4                              }
 547   3                      }
 548   2                      else if (t_PaperBwKey.us_finishFlag == KEY_SHORT_UP_FLAG) /* 短按 */
 549   2                      {
 550   3                              gcKeyType = KEY_SHORT_UP_FLAG;   
C51 COMPILER V9.00   MAIN                                                                  05/12/2016 15:16:38 PAGE 10  

 551   3      
 552   3                              t_PaperBwKey.us_finishFlag = 0;
 553   3                              t_PaperBwKey.us_logStep = 0;                    
 554   3      
 555   3                              usLongDownFlag = 0;   /* 清长按标志 */
 556   3      
 557   3                              write_key_flag = 1;   /* 有按键，需要写按键到主板 */                    
 558   3                      }
 559   2                      else                                                       /* 长按抬起 */
 560   2                      {
 561   3                              gcKeyType = KEY_LONG_UP_FLAG;   
 562   3      
 563   3                              t_PaperBwKey.us_finishFlag = 0;
 564   3                              t_PaperBwKey.us_logStep = 0;                    
 565   3      
 566   3                              usLongDownFlag = 0;   /* 清长按标志 */
 567   3      
 568   3                              write_key_flag = 1;   /* 有按键，需要写按键到主板 */                    
 569   3                      }       
 570   2              }
 571   1      
 572   1              /* 切纸 */      
 573   1      #if 0
                      if (t_CutKey.us_finishFlag != 0) 
                      {
                              gsKeyVal = KEY_IO3;
                              
                              if (t_CutKey.us_finishFlag == KEY_LONG_DOWN_FLAG)     /* 长按 */
                              {                       
                                      gcKeyType = KEY_LONG_DOWN_FLAG;  
              
                                      if (usLongDownFlag == 0)
                                      {
                                              usLongDownFlag = 1;
              
                                              write_key_flag = 1;   /* 有按键，需要写按键到主板 */
                                      }
                              }
                              else if (t_CutKey.us_finishFlag == KEY_SHORT_UP_FLAG) /* 短按 */
                              {
                                      gcKeyType = KEY_SHORT_UP_FLAG;   
              
                                      t_CutKey.us_finishFlag = 0;
                                      t_CutKey.us_logStep = 0;                        
              
                                      usLongDownFlag = 0;   /* 清长按标志 */
              
                                      write_key_flag = 1;   /* 有按键，需要写按键到主板 */                    
                              }
                              else                                                       /* 长按抬起 */
                              {
                                      gcKeyType = KEY_LONG_UP_FLAG;   
              
                                      t_CutKey.us_finishFlag = 0;
                                      t_CutKey.us_logStep = 0;                        
              
                                      usLongDownFlag = 0;   /* 清长按标志 */
              
                                      write_key_flag = 1;   /* 有按键，需要写按键到主板 */                    
                              }       
                      }
              #endif
C51 COMPILER V9.00   MAIN                                                                  05/12/2016 15:16:38 PAGE 11  

 613   1      
 614   1              /* 下料 */      
 615   1              if (t_PaperDownKey.us_finishFlag != 0) 
 616   1              {
 617   2                      gsKeyVal = KEY_IO4;
 618   2                      
 619   2                      if (t_PaperDownKey.us_finishFlag == KEY_LONG_DOWN_FLAG)     /* 长按 */
 620   2                      {                       
 621   3                              gcKeyType = KEY_LONG_DOWN_FLAG;  
 622   3      
 623   3                              if (usLongDownFlag == 0)
 624   3                              {
 625   4                                      usLongDownFlag = 1;
 626   4      
 627   4                                      write_key_flag = 1;   /* 有按键，需要写按键到主板 */
 628   4                              }
 629   3                      }
 630   2                      else if (t_PaperDownKey.us_finishFlag == KEY_SHORT_UP_FLAG) /* 短按 */
 631   2                      {
 632   3                              gcKeyType = KEY_SHORT_UP_FLAG;   
 633   3      
 634   3                              t_PaperDownKey.us_finishFlag = 0;
 635   3                              t_PaperDownKey.us_logStep = 0;                  
 636   3      
 637   3                              usLongDownFlag = 0;   /* 清长按标志 */
 638   3      
 639   3                              write_key_flag = 1;   /* 有按键，需要写按键到主板 */                    
 640   3                      }
 641   2                      else                                                       /* 长按抬起 */
 642   2                      {
 643   3                              gcKeyType = KEY_LONG_UP_FLAG;   
 644   3      
 645   3                              t_PaperDownKey.us_finishFlag = 0;
 646   3                              t_PaperDownKey.us_logStep = 0;                  
 647   3      
 648   3                              usLongDownFlag = 0;   /* 清长按标志 */
 649   3      
 650   3                              write_key_flag = 1;   /* 有按键，需要写按键到主板 */                    
 651   3                      }       
 652   2              }
 653   1      
 654   1              /* 搓条 */      
 655   1              if (t_RollKey.us_finishFlag != 0) 
 656   1              {
 657   2                      gsKeyVal = KEY_IO5;
 658   2                      
 659   2                      if (t_RollKey.us_finishFlag == KEY_LONG_DOWN_FLAG)     /* 长按 */
 660   2                      {                       
 661   3                              gcKeyType = KEY_LONG_DOWN_FLAG;  
 662   3      
 663   3                              if (usLongDownFlag == 0)
 664   3                              {
 665   4                                      usLongDownFlag = 1;
 666   4      
 667   4                                      write_key_flag = 1;   /* 有按键，需要写按键到主板 */
 668   4                              }
 669   3                      }
 670   2                      else if (t_RollKey.us_finishFlag == KEY_SHORT_UP_FLAG) /* 短按 */
 671   2                      {
 672   3                              gcKeyType = KEY_SHORT_UP_FLAG;   
 673   3      
 674   3                              t_RollKey.us_finishFlag = 0;
C51 COMPILER V9.00   MAIN                                                                  05/12/2016 15:16:38 PAGE 12  

 675   3                              t_RollKey.us_logStep = 0;                       
 676   3      
 677   3                              usLongDownFlag = 0;   /* 清长按标志 */
 678   3      
 679   3                              write_key_flag = 1;   /* 有按键，需要写按键到主板 */                    
 680   3                      }
 681   2                      else                                                       /* 长按抬起 */
 682   2                      {
 683   3                              gcKeyType = KEY_LONG_UP_FLAG;   
 684   3      
 685   3                              t_RollKey.us_finishFlag = 0;
 686   3                              t_RollKey.us_logStep = 0;                       
 687   3      
 688   3                              usLongDownFlag = 0;   /* 清长按标志 */
 689   3      
 690   3                              write_key_flag = 1;   /* 有按键，需要写按键到主板 */                    
 691   3                      }       
 692   2              }
 693   1              
 694   1      }
 695          
 696          /*************定时器0中断***************
 697          函数原型：void tm0_isr(void) interrupt 1 using 1
 698          入口参数：无
 699          出口参数：无
 700          备注：
 701          *******************************/
 702          void tm0_isr() interrupt 1 using 1
 703          {
 704   1              public_val.ms_timer++;
 705   1              
 706   1              check_uart_rec();
 707   1      
 708   1              key_detect();
 709   1              
 710   1      }
 711          
 712          
 713          
 714          void main()
 715          {
 716   1              eeprom_en = 0;
 717   1      
 718   1              /* 硬件初始化 */
 719   1              sys_init();
 720   1      
 721   1              /* 全局变量初始化 */
 722   1              GlobalInit();
 723   1                      
 724   1              InitLEDDisplay();
 725   1      
 726   1              cnt_read_state = public_val.ms_timer;   
 727   1              
 728   1              //add by yq
 729   1              GpuSend("DR2\r\n");
 730   1              
 731   1              while(1)
 732   1              {       
 733   2                      if (start_com_flag == 0)
 734   2                      {
 735   3                              if (public_val.ms_timer - cnt_read_state > 500)  /* 开机延迟500ms才开始通信 */
 736   3                              //if (public_val.ms_timer - cnt_read_state > 1500)   //for test
C51 COMPILER V9.00   MAIN                                                                  05/12/2016 15:16:38 PAGE 13  

 737   3                              {
 738   4                                      cnt_read_state = public_val.ms_timer;
 739   4                                      cnt_read_param = public_val.ms_timer;
 740   4      
 741   4                                      /* 开始手动模式按键检测 */
 742   4                                      start_key_detect();
 743   4      
 744   4                                      start_com_flag = 1;
 745   4                              }
 746   3                      }
 747   2      
 748   2                      if (start_com_flag == 1)
 749   2                      {               
 750   3                              LEDDisplay();
 751   3                              
 752   3                              if(public_val.uart_rec_statu == 2)   /* 接收完毕，开始处理 */
 753   3                              {                       
 754   4                                      rec_data_func();
 755   4                                      
 756   4                                      public_val.uart_rec_statu = 3;   /* 置接收处理完毕状态 */
 757   4                                      public_val.uart_rec_count = 0;   /* 清接收字节计数 */
 758   4                              }
 759   3                              
 760   3      
 761   3                              send_data_func();
 762   3      
 763   3                              judge_key();
 764   3      
 765   3                      }
 766   2                      
 767   2              }
 768   1      }
 769          
 770          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1528    ----
   CONSTANT SIZE    =      6    ----
   XDATA SIZE       =    121       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
