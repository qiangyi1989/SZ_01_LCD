C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE LED_DISPLAY
OBJECT MODULE PLACED IN .\out\LED_Display.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE LED_Display.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\lst\LED_Display.lst) 
                    -OBJECT(.\out\LED_Display.obj)

line level    source

   1          /**
   2           * Copyright (c) 2012, 长沙晗光电子科技有限公司
   3           * All rights reserved.
   4           *
   5           * FILE:   LED_Display.c
   6           * LED显示程序
   7           *
   8           * @file LED_Display.h led_driver.h
   9           * 头文件.
  10           *
  11           * @author JWD
  12           * @date 2012-12-21
  13           *
  14           */
  15          #include "eeprom.h"
  16          #include "LED_Display.h"
  17          #include "I2c.h"
  18          #include "reg51.h"
  19          #include "save_cnt.h"
  20          #include "global.h"
  21          #include "sys.h"
  22          
  23          #include "uart.h"
  24          #include <stdio.h>
  25          #include <string.h>
  26          
  27          #ifdef DISP_C
  28          
  29          #define BELL P25
  30          
  31          #define MAIN_ADJ_DELAY 2000
  32          #define KEY_DOU_DELY 50
  33          #define KEY_LONG_DELY 100
  34          #define BELL_ON_DELY 50
  35          #define LONG_KEY_STEP_SWITCH 50
  36          #define DISP_ERR_TIMER 1000 //延时数据修改失败时间 和 错误显示时间
  37          
  38          //#define NO_KEY_RETURN_MAIN 15000 //00000菜单无按键返回主页面延时
  39          #define NO_KEY_RETURN_MAIN 30000 //00000菜单无按键返回主页面延时
  40          
  41          #define TEST_MODE_CNT    40
  42          //#define LEARN_MODE_CNT   20
  43          #define LEARN_MODE_CNT   30
  44          
  45          
  46          extern char eeprom_en;
  47          extern xdata unsigned int disp_buf[5];
  48          
  49          /*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  50           |                                函数声明                                    |
  51          ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
  52          //void InitLEDDrivers(void);
  53          void LEDShowFlashString(const char  * buff,char x);
  54          //void LEDShowString(char  * buff,char x);
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 2   

  55          void LEDShowCharS(const char * buff,char num,char x);
  56          void LEDClearChar(char x,char n);
  57          void LEDClearCharS(char num,char x);
  58          void LED_ShowNumber(char * buff,char x);
  59          //void LED_ShowData(char * buff,char x,char nPoint);
  60          
  61          static char DataToStr(void * const pData,char size,char nBit,char nPoint,char *string,char nFlag,char nTyp
             -e);
  62          static long StrToData(char *string,char len,char nType);
  63          
  64          //extern void ResetDoorForTest();
  65          
  66          
  67          //sbit P17 = P1^7;
  68          //sbit P37 = P3^7;
  69          sbit P25 = P2^5;
  70          //sbit P21 = P2^1;
  71          //sbit P22 = P2^2;
  72          //sbit P14 = P1^4;
  73          
  74          //#define RED P17
  75          //#define YELLOW P54
  76          //#define BLUE P55
  77          
  78          
  79          
  80          
  81          //char xdata DIS_OPTIONING;                                                                                     ///<【不允许插引工作标志。0：允许插引；1：不允许插引】
  82          char xdata DIS_ERR_FLGA = 0;
  83          
  84          //内部变量定义
  85          //static xdata unsigned int  l_state;                                                           //显示画面状态
  86          
  87          //static xdata unsigned long  l_input_value;                                            //参数修改画面输入值
  88          static xdata char  l_stop_poll;                                                                 //停止循环显示
  89          
  90          //static xdata char DisplayStateOld;                                                            //记忆画面状态
  91          
  92          static xdata char  DisplayMainID;                                                                       //主画面序号
  93          static xdata char  DisplayMenuID;                                                                       //菜单画面序号
  94          
  95          static xdata char  DisplayMainTotal;                                                            //主画面总数
  96          static xdata char  MenuTotals;                                                                  //主菜单画面总数
  97          
  98          
  99          static xdata char  DisplayMenuTotal;                                                            //菜单画面总数
 100          
 101          static xdata char  DisplayItemNum;                                                              //显示项目序号
 102          static xdata char  DisplayBitNum;                                                                       //显示位号
 103          
 104          //static xdata char  MenuUpdateState;                                                           //菜单显示更新状态
 105          static xdata char  PasswordBuff[5];                                                             //密码数据缓冲区
 106          static xdata char  DisplayBuff[10];
 107          
 108          int  DisplayState;                                                                                      //画面状态
 109          xdata int  LCDDisplayState;
 110          xdata int  LCDChildDisplayState = 0;
 111          
 112          static xdata const MAIN_SHOW * pMain;                                                           //主画面数据指针
 113          static xdata const MENU_SHOW * pMenu;                                                           //菜单指针
 114          static xdata const MENU_ITEM * pItem;                                                           //菜单项目指针
 115          
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 3   

 116          //static xdata const MENU_SHOW * pCode;
 117          static xdata const MENU_SHOW * pDataValue;
 118          
 119          //static xdata const TYPE_CODE * disp_code;
 120          
 121          //static xdata char  UpdateDataCount;
 122          static xdata char  CycShowCount;
 123          static xdata char  InputDataLen;
 124          static xdata long  TempInputData;
 125          static xdata char  DataType;
 126          
 127          
 128          xdata public_stru public_val;
 129          xdata MENU_CHANG now_menu;
 130          
 131          xdata char cPauseBell = 0; 
 132          
 133          xdata char test_mode = 0;   /* 测试模式标志: 0正常工作模式，1测试模式 */
 134          
 135          
 136          xdata char uart_send_buf[100];
 137          
 138          
 139          //菜单配置界面
 140          //参数组定义
 141          //#define DEBUG_MENU_GS_VAL 30
 142          //#define USE_MENU_NUM 16
 143          
 144          static xdata MENU_SHOW Menu00000[MENU_ID_00000_MAX_ITEM];
 145          static xdata MENU_SHOW Menu10101[MENU_ID_10101_MAX_ITEM];
 146          static xdata MENU_SHOW Menu10102[MENU_ID_10102_MAX_ITEM];
 147          static xdata MENU_SHOW Menu10103[MENU_ID_10103_MAX_ITEM];
 148          static xdata MENU_SHOW Menu10104[MENU_ID_10104_MAX_ITEM];
 149          static xdata MENU_SHOW Menu20101[MENU_ID_20101_MAX_ITEM];
 150          
 151          xdata char Menu_Number[MENU_NUM] = {MENU_ID_00000_MAX_ITEM,
 152                                                                                  MENU_ID_10101_MAX_ITEM,
 153                                                                                  MENU_ID_10102_MAX_ITEM,
 154                                                                                  MENU_ID_10104_MAX_ITEM,
 155                                                                                  MENU_ID_20101_MAX_ITEM
 156                  };
 157          //xdata char Menu0_Number = 10, Menu1_Number = 20;
 158          
 159          /*--------------菜单设置画面 数据配置-------------*/
 160          code MENU_ITEM MenuItem[]={
 161            //菜单序号,菜单地址,密码 数据存储首地址 最大数据个数
 162                  {MENU_ID_00000,Menu00000,"00000",EEPROM_MENU_1,MENU_ID_00000_MAX_ITEM,0,&Menu_Number[0]}, 
 163                  {MENU_ID_10101,Menu10101,"10101",EEPROM_MENU_2,MENU_ID_10101_MAX_ITEM,0,&Menu_Number[2]}, 
 164                  {MENU_ID_10102,Menu10102,"10102",EEPROM_MENU_3,MENU_ID_10102_MAX_ITEM,0,&Menu_Number[3]}, 
 165                  {MENU_ID_10103,Menu10103,"10103",EEPROM_MENU_4,MENU_ID_10103_MAX_ITEM,0,&Menu_Number[4]}, 
 166                  {MENU_ID_10104,Menu10104,"10104",EEPROM_MENU_5,MENU_ID_10104_MAX_ITEM,0,&Menu_Number[5]}, 
 167                  {MENU_ID_20101,Menu20101,"20101",EEPROM_MENU_6,MENU_ID_20101_MAX_ITEM,0,&Menu_Number[6]}, 
 168                  {0,0,0}
 169          };
 170          
 171          code MAIN_SHOW MainItem[]={
 172              //显示的字符串,数据显示类型,数据地址,函数名
 173              {"",TY_D_A,0,&(public_val.main_disp_val),INT32_SIZE,5,0,99999,0},           
 174              {0,0,0}
 175          };
 176          
 177          /*-------------------------主画面数据配置,全局变量----------------------------*/
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 4   

 178          xdata const MAIN_PIC main_menu_cfg[]={
 179              {4,2,MainItem,MenuItem},
 180          };
 181          
 182          static code const char LED_ASCII[128]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, //0x0
 183                                                      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
 184                                                      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, //0x1
 185                                                      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
 186                                                      0x00,0xFE,0xB0,0xED,0xF9,0xB3,0xDB,0xDF, //0x2
 187                                                      0xF0,0xFF,0xFB,0x00,0x00,0x40,0x80,0x00, 
 188                                                      0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07, // 起始48:0-7
 189                                                      0x7f,0x6F,0x77,0x1F,0x4E,0x3D,0x4F,0x47, //     56
 190                                                      0xFB,0x77,0x1F,0x4E,0x3D,0x79,0x71,0xFB, //     64
 191                                                      0x37,0x06,0x0E,0x07,0x38,0x6A,0x76,0x1D, //     72
 192                                                      0x73,0x67,0x05,0x5B,0x31,0x3E,0x1C,0x5C, //     80
 193                                                      0x31,0x3B,0xED,0x00,0x00,0x00,0x62,0x08,
 194                                                      0x00,0x77,0x1F,0x4E,0x3D,0x4F,0x47,0xFB, //0x6
 195                                                      0x37,0x06,0x38,0x07,0x0E,0x6A,0x15,0x1D, 
 196                                                      0x67,0x73,0x50,0x5B,0x78,0x3E,0x1C,0x5C, //0x7
 197                                                      0x31,0x3B,0xED,0x00,0x00,0x00,0x00,0x00, 
 198                                     };
 199          
 200          //unsigned short usParamNum = 30;   /* 主板的配置参数个数，最大为30个 */
 201          
 202          xdata int gsKeyVal = 0;    /* 按键值 */
 203          xdata char gcKeyType = 0;  /* 按键类型: 0短按, 1长按下，2长按抬起 */
 204          
 205          //xdata char gcKeyLongUpFlag = 0;    /* 长按抬起标志:0未抬起，1抬起 */
 206          //xdata char gcKeyLongDownFlag = 0;  /* 长按按下标志:0未按下，1按下 */
 207          
 208          xdata _U_BIT_PARAM unKey;
 209           
 210          
 211          xdata char speed_mode = 1;   //速度模式: 1高速， 0低速
 212          
 213          xdata char qz_wait = 0;      //等待切纸确认: 0未等待，1等待
 214          
 215          //add by yq
 216          xdata char Menu0_Number;
 217          xdata unsigned int g_iFlashOldTime = 0;
 218          xdata unsigned int g_iInterfaceChangOldTime=0;
 219          xdata char* g_pcStatus = 0;
 220          xdata int g_iErrStatus =0;
 221          xdata int g_iErrUIChange =0;
 222          void ClearLCDScreen(int c);                                                
 223          /*++++++++++++++++++++++++++++++++++++++++++++++++
 224          功能：显示字符串。
 225          
 226          参数：buff:欲发送的数据缓冲区；x:坐标
 227          
 228          返回值：无。
 229          
 230          说明：
 231          ++++++++++++++++++++++++++++++++++++++++++++++++*/
 232          void  LEDShowFlashString(const char  * buff,char x) 
 233          {
 234   1              do
 235   1              {
 236   2                      disp_buf[x++] = LED_ASCII[*buff++];
 237   2              }while(x<6 && *buff!=0);
 238   1      }
 239          
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 5   

 240          void  LEDShowCaption(char num) 
 241          {
 242   1      char *buff,x = 0;
 243   1      switch(num)
 244   1              {
 245   2                      case 0:
 246   2                              buff = "1-";
 247   2                      break;
 248   2                      case 1:
 249   2                              buff = "2-";
 250   2                      break;          
 251   2                      case 2:
 252   2                              buff = "3-";
 253   2                      break;  
 254   2                      case 3:
 255   2                              buff = "4-";
 256   2                      break;          
 257   2                      case 4:
 258   2                              buff = "5-";
 259   2                      break;          
 260   2                      case 5:
 261   2                              buff = "6-";
 262   2                      break;          
 263   2                      case 6:
 264   2                              buff = "7-";
 265   2                      break;          
 266   2                      case 7:
 267   2                              buff = "8-";
 268   2                      break;          
 269   2                      case 8:
 270   2                              buff = "9-";
 271   2                      break;          
 272   2                      case 9:
 273   2                              buff = "10";
 274   2                      break;          
 275   2                      case 10:
 276   2                              buff = "11";
 277   2                      break;          
 278   2                      case 11:
 279   2                              buff = "12";
 280   2                      break;          
 281   2                      case 12:
 282   2                              buff = "13";
 283   2                      break;  
 284   2                      case 13:
 285   2                              buff = "14";
 286   2                      break;  
 287   2                      case 14:
 288   2                              buff = "15";
 289   2                      break;  
 290   2                      case 15:
 291   2                              buff = "16";
 292   2                      break;  
 293   2                      case 16:
 294   2                              buff = "17";
 295   2                      break;
 296   2                      case 17:
 297   2                              buff = "18";
 298   2                      break;  
 299   2                      case 18:
 300   2                              buff = "19";
 301   2                      break;  
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 6   

 302   2                      case 19:
 303   2                              buff = "20";
 304   2                      break;                  
 305   2                      case 20:
 306   2                              buff = "21";
 307   2                      break;          
 308   2                      case 21:
 309   2                              buff = "22";
 310   2                      break;          
 311   2                      case 22:
 312   2                              buff = "23";
 313   2                      break;  
 314   2                      case 23:
 315   2                              buff = "24";
 316   2                      break;  
 317   2                      case 24:
 318   2                              buff = "25";
 319   2                      break;  
 320   2                      case 25:
 321   2                              buff = "26";
 322   2                      break;  
 323   2                      case 26:
 324   2                              buff = "27";
 325   2                      break;
 326   2                      case 27:
 327   2                              buff = "28";
 328   2                      break;  
 329   2                      case 28:
 330   2                              buff = "29";
 331   2                      break;  
 332   2                      case 29:
 333   2                              buff = "30";
 334   2                      break;  
 335   2                      case 80:
 336   2                              buff = "   A1";
 337   2                      break;
 338   2                      case 81:
 339   2                              buff = "   A2";
 340   2                      break;
 341   2                      case 82:
 342   2                              buff = "   A3";
 343   2                      break;
 344   2                      case 83:
 345   2                              buff = "   A4";
 346   2                      break;
 347   2                      case 84:
 348   2                              buff = "   A5";
 349   2                      break;
 350   2                      case 85:
 351   2                              buff = "   A6";
 352   2                      break;
 353   2                      case 86:
 354   2                              buff = "   A7";
 355   2                      break;
 356   2                      case 87:
 357   2                              buff = "   A8";
 358   2                      break;
 359   2                      case 88:
 360   2                              buff = "   A9";
 361   2                      break;
 362   2                      case 89:
 363   2                              buff = "  A10";
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 7   

 364   2                      break;
 365   2              }
 366   1              do
 367   1              {
 368   2                      disp_buf[x++] = LED_ASCII[*buff++];
 369   2              }while(x<6 && *buff!=0);
 370   1      }
 371          
 372          /*++++++++++++++++++++++++++++++++++++++++++++++++
 373          功能：显示字符串。
 374          
 375          参数：buff:欲发送的数据缓冲区；x:坐标
 376          
 377          返回值：无。
 378          
 379          说明：
 380          ++++++++++++++++++++++++++++++++++++++++++++++++*/
 381          /*void  LEDShowString(char  * buff,char x) 
 382          {
 383                  do
 384                  {
 385                          disp_buf[x++] = LED_ASCII[*buff++];
 386                  
 387                  }while(x<6 && *buff!=0);
 388          }*/
 389          
 390          /*void  LED_ShowData(char * buff,char x,char nPoint)
 391          {
 392              do
 393                  {
 394                  if(nPoint !=0 && (8-nPoint)==x)
 395                          disp_buf[x++] = LED_ASCII[*buff++] | 0x80;              ///<【位7置1】
 396                          else
 397                                  disp_buf[x++] = LED_ASCII[*buff++];
 398                  }while(x<6 && *buff!=0);
 399          }*/
 400          
 401          /*++++++++++++++++++++++++++++++++++++++++++++++++
 402          功能：清除指定行号列号的字符。
 403          
 404          参数：x:坐标1-8。
 405          
 406          返回值：无。
 407          
 408          说明： 无。
 409          ++++++++++++++++++++++++++++++++++++++++++++++++*/
 410          void  LEDClearChar(char x,char n)
 411          {
 412   1              char i;
 413   1              for(i = x; i< (x+n); i++ )
 414   1                      {
 415   2                              disp_buf[i] = 0;                
 416   2                      }
 417   1      }
 418          
 419          
 420          /*++++++++++++++++++++++++++++++++++++++++++++++++
 421          功能：显示数字。
 422          参数：buff:欲发送的数据缓冲区；x:坐标
 423          返回值：无。
 424          说明：
 425          ++++++++++++++++++++++++++++++++++++++++++++++++*/
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 8   

 426          void  LED_ShowNumber(char * buff,char x) 
 427          {
 428   1              char TempFlag=0;
 429   1              do
 430   1              {
 431   2                      if(*(buff+1)!='.' || TempFlag==1)
 432   2                      {
 433   3                              disp_buf[x++] = LED_ASCII[*buff++];
 434   3                              //SendLed(x++,LED_ASCII[*buff++]);
 435   3                      }
 436   2                      else
 437   2                      {
 438   3                              disp_buf[x++] = LED_ASCII[*buff++] | 0x80;
 439   3                              //SendLed(x++,(LED_ASCII[*buff++] | 0x80));
 440   3                              TempFlag=1;
 441   3                              buff++;
 442   3                      }
 443   2              }while(x<6);
 444   1              
 445   1      }
 446          
 447          //菜单数据指向
 448          void menu_cfg(void)
 449          {
 450   1              char i;
 451   1              for(i = 0; i < MENU_ID_00000_MAX_ITEM ; i++)
 452   1                      {
 453   2                              Menu00000[i].m_data_vale = &public_val.Disp_Dz_00000[i];
 454   2                      }
 455   1      
 456   1              for(i = 0; i < MENU_ID_10101_MAX_ITEM ; i++)
 457   1                      {
 458   2                              Menu10101[i].m_data_vale = &public_val.Disp_Dz_10101[i];
 459   2                      }
 460   1      
 461   1              for(i = 0; i < MENU_ID_10102_MAX_ITEM ; i++)
 462   1                      {
 463   2                              Menu10102[i].m_data_vale = &public_val.Disp_Dz_10102[i];
 464   2                      }
 465   1              
 466   1              for(i = 0; i < MENU_ID_10103_MAX_ITEM ; i++)
 467   1                      {
 468   2                              Menu10103[i].m_data_vale = &public_val.Disp_Dz_10103[i];
 469   2                      }
 470   1      
 471   1              for(i = 0; i < MENU_ID_10104_MAX_ITEM ; i++)
 472   1                      {
 473   2                              Menu10104[i].m_data_vale = &public_val.Disp_Dz_10104[i];
 474   2                      }
 475   1      
 476   1              for(i = 0; i < MENU_ID_20101_MAX_ITEM ; i++)
 477   1                      {
 478   2                              Menu20101[i].m_data_vale = &public_val.Disp_Dz_20101[i];
 479   2                      }
 480   1      }
 481          
 482          /*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 483          名称:   read_menu_data(char menu_id)
 484          功能：  读取菜单配置数据 和 菜单数据
 485          参数：  无
 486          返回值：无
 487          ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 9   

 488          
 489          
 490          void read_menu_data(char menu_id)
 491          {
 492   1              unsigned char *progbyte,read_byte;
 493   1              unsigned int progadd;
 494   1      
 495   1              int i;
 496   1      
 497   1              progadd = MenuItem[menu_id].eeprom_cfg_add;
 498   1              read_byte = IapReadByte(progadd++);
 499   1              
 500   1              for(i = 0; i < MenuItem[menu_id].MenuItem_Max; i++)
 501   1                      {
 502   2                              if(menu_id == MENU_ID_10104)
 503   2                                      MenuItem[menu_id].m_pcfg[i].m_max = 450;
 504   2                              else
 505   2                                      MenuItem[menu_id].m_pcfg[i].m_max = 999;
 506   2                              MenuItem[menu_id].m_pcfg[i].m_min = 0;
 507   2                              MenuItem[menu_id].m_pcfg[i].ext_property = 0; //read_byte;
 508   2                      }
 509   1              MenuItem[MENU_ID_10104].m_pcfg[PASS_LOCK_COUNT - 1].m_max = 500;
 510   1              
 511   1              switch(menu_id)
 512   1                      {
 513   2                              case MENU_ID_00000:
 514   2                                      progbyte = (unsigned char *)&public_val.Disp_Dz_00000[0];
 515   2                              break;                  
 516   2                              case MENU_ID_10101:
 517   2                                      progbyte = (unsigned char *)&public_val.Disp_Dz_10101[0];
 518   2                              break;
 519   2                              case MENU_ID_10102:
 520   2                                      progbyte = (unsigned char *)&public_val.Disp_Dz_10102[0];
 521   2                              break;
 522   2                              case MENU_ID_10103:
 523   2                                      progbyte = (unsigned char *)&public_val.Disp_Dz_10103[0];
 524   2                              break;
 525   2                              case MENU_ID_10104:
 526   2                                      progbyte = (unsigned char *)&public_val.Disp_Dz_10104[0];
 527   2                              break;
 528   2                              case MENU_ID_20101:
 529   2                                      progbyte = (unsigned char *)&public_val.Disp_Dz_20101[0];
 530   2                              break;
 531   2                      }
 532   1              progadd = MenuItem[menu_id].eeprom_add;
 533   1              for(i = 0; i < MenuItem[menu_id].MenuItem_Max + 1; i++)
 534   1                      {
 535   2                              *progbyte = IapReadByte(progadd++);
 536   2                              progbyte++;
 537   2                              *progbyte = IapReadByte(progadd++);
 538   2                              progbyte++;
 539   2                      }
 540   1                      
 541   1              
 542   1      }
 543          
 544          //将菜单值更新到通讯菜单值，合并两个菜单。
 545          void update_menu_to_com(void)
 546          {
 547   1              char TempB;
 548   1              for(TempB = 0; TempB < MENU_ID_00000_MAX_ITEM; TempB++)
 549   1                      {
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 10  

 550   2                              public_val.menu_parm[TempB] = public_val.Disp_Dz_00000[TempB];
 551   2                      }
 552   1      
 553   1              for(TempB = 0; TempB < MENU_ID_10101_MAX_ITEM; TempB++)
 554   1                      {
 555   2                              public_val.menu_parm[TempB + MENU_ID_00000_MAX_ITEM] = public_val.Disp_Dz_10101[TempB];
 556   2                      }       
 557   1      }
 558          
 559          //读取MCU的ID号 值举例:0D 00 00 2C 02 4B E5
 560          //                                         0D 00 00 30 03 64 E4(开发板载MCU)
 561          void read_id()
 562          {
 563   1          char code *cptr;
 564   1              char i,read_byte[7];
 565   1          cptr = ID_ADDR_ROM;         //从程序区读取ID号
 566   1          for(i=0; i<7; i++)         //读7个字节
 567   1                  {
 568   2                      read_byte[i] = *cptr++; // 0xff; // 
 569   2                  }
 570   1              public_val.password_index_disp = (int)read_byte[5];
 571   1              public_val.password_index_disp <<= 8;
 572   1              public_val.password_index_disp |= (int)read_byte[6] & 0xff;
 573   1              public_val.password_index = public_val.password_index_disp % 2000;
 574   1      
 575   1              cptr = EEPROM_PASSWORD;
 576   1              read_byte[0] = IapReadByte(EEPROM_PASSWORD + (public_val.password_index<<1));
 577   1              read_byte[1] = IapReadByte(EEPROM_PASSWORD + (public_val.password_index<<1)+1);
 578   1              public_val.password_val[0] = (int)read_byte[0] & 0xff;
 579   1              public_val.password_val[1] = (int)read_byte[1] & 0xff;
 580   1      }       
 581          
 582          /*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 583          名称:   void InitLEDDisplay(void)
 584          
 585          功能：  显示初始化程序
 586          
 587          参数：  无
 588                
 589          返回值：无
 590          ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
 591          void InitLEDDisplay(void)
 592          {
 593   1          char TempB;
 594   1          //unsigned int temp_int;
 595   1                      
 596   1              BELL = 0;
 597   1      
 598   1              //LEDShowFlashString("Lt-2 ",0);
 599   1              LEDShowFlashString("60409",0);    /* 显示操作板版本号 */
 600   1              
 601   1      //      TM1637_Write();
 602   1      
 603   1              ///【统计主界面需要显示的项数】
 604   1              pMain = main_menu_cfg[0].m_main;
 605   1              for( TempB = 0; pMain[TempB].m_str; TempB++ ) ///<【空串不为0，即不为假】
 606   1                      {
 607   2                              ;
 608   2                      }                       
 609   1              DisplayMainTotal = TempB;
 610   1      
 611   1              ///【统计下级子菜单数量】
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 11  

 612   1              pItem = main_menu_cfg[0].m_menu;
 613   1              pMenu = pItem[0].m_pcfg;
 614   1              for(TempB = 0; TempB == pItem[TempB].MenuID; TempB++) 
 615   1                      {
 616   2                              read_menu_data(TempB); //读取菜单数据值;
 617   2                      }
 618   1              MenuTotals = TempB;
 619   1              update_menu_to_com();
 620   1      
 621   1              menu_cfg();
 622   1              
 623   1              
 624   1              CycShowCount = 0;
 625   1              DisplayItemNum = 0;
 626   1              DisplayState = ST_MAIN;                                                                 //进入主画面
 627   1              l_stop_poll = 0;                                                                                //默认定格显示
 628   1              
 629   1              //标志位初始化
 630   1              public_val.Work_Pause_Flag = 0; 
 631   1              public_val.Err_Flag = 0;
 632   1              public_val.Bell_Flag = 0;
 633   1      
 634   1              public_val.cnt_after_powered = 0;
 635   1              public_val.Lock_Flag = 0;
 636   1      
 637   1              //加密相关变量初始化
 638   1              read_id();
 639   1      
 640   1              public_val.Disp_Dz_10103[12] = public_val.password_val[0];
 641   1              public_val.Disp_Dz_10103[13] = public_val.password_val[1];
 642   1              
 643   1              public_val.input_pass_mask = 0;
 644   1              for(TempB = 0; TempB < PASS_LOCK_COUNT; TempB++)
 645   1                      {
 646   2                              if( (public_val.Disp_Dz_10103[TempB * 2] == 0)
 647   2                                      && (public_val.Disp_Dz_10103[TempB * 2 + 1] == 0)
 648   2                                      )
 649   2                                      {
 650   3                                              public_val.input_pass_mask |= 1 << TempB;
 651   3                                      }
 652   2                              public_val.Disp_Dz_10102[TempB * 2] = 0;
 653   2                              public_val.Disp_Dz_10102[TempB * 2 + 1] = 0;
 654   2                      }
 655   1              
 656   1              read_loack_count();
 657   1              read_user_count();
 658   1              public_val.Disp_Dz_20101[0] = public_val.work_count / LOCK_UNIT; //已生产根数赋值
 659   1              /* added by james */
 660   1          public_val.ms_timer = 0;
 661   1              public_val.io_read = 0;
 662   1      
 663   1              unKey.all = 0xFFFF;
 664   1      
 665   1      }
 666          
 667          
 668          //完成对菜单数据的存储
 669          void func_menu_update(int menu_id)
 670          {
 671   1              unsigned char *progbyte,i,readbyte;
 672   1              unsigned int progadd;
 673   1              
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 12  

 674   1              eeprom_en = 0xaa;
 675   1              IapEraseSector(MenuItem[menu_id].eeprom_add);
 676   1              eeprom_en = 0;
 677   1              switch(menu_id)
 678   1                      {
 679   2                              case MENU_ID_00000:
 680   2                                      progbyte = (unsigned char *)&public_val.Disp_Dz_00000[0];
 681   2                              break;                  
 682   2                              case MENU_ID_10101:
 683   2                                      progbyte = (unsigned char *)&public_val.Disp_Dz_10101[0];
 684   2                              break;
 685   2                              case MENU_ID_10102:
 686   2                                      progbyte = (unsigned char *)&public_val.Disp_Dz_10102[0];
 687   2                              break;
 688   2                              case MENU_ID_10103:
 689   2                                      progbyte = (unsigned char *)&public_val.Disp_Dz_10103[0];
 690   2                              break;
 691   2                              case MENU_ID_10104:
 692   2                                      progbyte = (unsigned char *)&public_val.Disp_Dz_10104[0];
 693   2                              break;
 694   2                              case MENU_ID_20101:
 695   2                                      progbyte = (unsigned char *)&public_val.Disp_Dz_20101[0];
 696   2                              break;
 697   2                              break;                  
 698   2                      }
 699   1              progadd = MenuItem[menu_id].eeprom_add;
 700   1              for(i = 0; i < MenuItem[menu_id].MenuItem_Max + 1; i++)
 701   1                      {
 702   2                              //SendData(*(progbyte));
 703   2                              eeprom_en = 0xaa;
 704   2                              IapProgramByte(progadd,*(progbyte));
 705   2                              readbyte = IapReadByte(progadd);
 706   2                              if(readbyte != *progbyte)
 707   2                                      public_val.Err_Flag |= ERR_NUM_EEP_ERR; //写EERPOM错误
 708   2                              progbyte++;
 709   2                              progadd++;
 710   2                              //SendData(*(progbyte));
 711   2                              IapProgramByte(progadd,*(progbyte));
 712   2                              readbyte = IapReadByte(progadd);
 713   2                              if(readbyte != *progbyte)
 714   2                                      public_val.Err_Flag |= ERR_NUM_EEP_ERR;
 715   2                              progbyte++;
 716   2                              progadd++;
 717   2                              eeprom_en = 0;
 718   2                      }
 719   1              update_menu_to_com();
 720   1              write_param_flag = 1;    // 更新下位机参数
 721   1                              
 722   1      }
 723          
 724          #if 0
              //完成对版本号的存储
              void func_ver_update(void)
              {
                      char progbyte;
                      eeprom_en = 0xaa;
                      IapEraseSector(EEPROM_DRIVE_TYPE);
                      eeprom_en = 0;
                      progbyte = (unsigned char)(public_val.drive_type >> 8);
                      eeprom_en = 0xaa;
                      IapProgramByte(EEPROM_DRIVE_TYPE,progbyte);
                      progbyte = (unsigned char)(public_val.drive_type & 0xff);
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 13  

                      IapProgramByte(EEPROM_DRIVE_TYPE + 1,progbyte);
                      progbyte = public_val.drive_indx;
                      
                      IapProgramByte(EEPROM_DRIVE_INDX,progbyte);
                      eeprom_en = 0;
              }
              
              //完成对菜单配置的存储
              void func_cfg_update(int menu_id)
              {
              unsigned char i,progbyte;
              unsigned int progadd;
                      eeprom_en = 0xaa;
                      IapEraseSector(MenuItem[menu_id].eeprom_cfg_add);
                      progadd = MenuItem[menu_id].eeprom_cfg_add;
                      progbyte = (unsigned char)(*(MenuItem[menu_id].com_max_item));
                      IapProgramByte(progadd++,progbyte);
                      
                      for(i = 0; i < MenuItem[menu_id].MenuItem_Max; i++)
                              {
                                      progbyte = (unsigned char)(MenuItem[menu_id].m_pcfg[i].m_max >> 8);
                                      IapProgramByte(progadd++,progbyte);
                                      progbyte = (unsigned char)(MenuItem[menu_id].m_pcfg[i].m_max & 0xff);
                                      IapProgramByte(progadd++,progbyte);
                                      progbyte = (unsigned char)(MenuItem[menu_id].m_pcfg[i].m_min >> 8);
                                      IapProgramByte(progadd++,progbyte);
                                      progbyte = (unsigned char)(MenuItem[menu_id].m_pcfg[i].m_min & 0xff);
                                      IapProgramByte(progadd++,progbyte);
                                      progbyte = (unsigned char)(MenuItem[menu_id].m_pcfg[i].ext_property);
                                      IapProgramByte(progadd++,progbyte);
                              }
                      eeprom_en = 0;
              }
              
              #endif
 771          
 772          /*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 773          名称:   void LEDDisplay(char Key,char UpdateState)
 774          功能：  显示运行程序
 775          参数：  无
 776          返回值：无
 777          ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
 778          
 779          
 780          /* 测试模式内容显示 */
 781          void test_set_display(char test_mode)
 782          {
 783   1              switch (test_mode)
 784   1              {
 785   2                      case 0:
 786   2                              LEDShowFlashString(" F--0",0);                  
 787   2                              break;
 788   2                      case 1:
 789   2                              LEDShowFlashString(" F--1",0);
 790   2                              break;
 791   2                      case 2:
 792   2                              LEDShowFlashString(" F--2",0);
 793   2                              break;                  
 794   2                      case 3:
 795   2                              LEDShowFlashString(" F--3",0);
 796   2                              break;  
 797   2                      case 4:
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 14  

 798   2                              LEDShowFlashString(" F--4",0);
 799   2                              break;                          
 800   2                      case 5:
 801   2                              LEDShowFlashString(" F--5",0);
 802   2                              break;                          
 803   2                      default:
 804   2                              break;
 805   2              }       
 806   1      }
 807          
 808          
 809          
 810          void LEDDisplay(void)
 811          {
 812   1          char TempCountB,TempDataB,TempValue,i,TempB;
 813   1          static xdata char Bell_flag = 0,zc_key_flag = 0;
 814   1          static xdata unsigned int UpdateCountB,TempCount,flash_flag = 0;    
 815   1              static xdata long DisplayValueTemp;
 816   1              
 817   1              //static xdata char Key_Val = 0,Pr_Key_Val = 0;
 818   1              //static xdata char old_key = 0;
 819   1              static xdata int Key_Val = 0,Pr_Key_Val = 0, old_key = 0;
 820   1      
 821   1              static xdata char UpdateState = 0;
 822   1      
 823   1              static xdata int Read_key_dely = 0,Read_key_dely_2 = 0,long_count = 0,long_input_flag = 0;
 824   1              static xdata int Read_key_dely_3 = 0,No_key_delay = 0;
 825   1              static xdata int Main_adj_key_delay = 0,Main_disp_other = 0;
 826   1              static xdata int edit_menu_id = 0;
 827   1              static xdata int bell_delay;
 828   1              static xdata int long_key_count = 0,long_key_step = 1,pr_long_input_flag;
 829   1              static xdata char war_bell_step = 0;
 830   1              static xdata int war_bell_delay = 0;
 831   1      
 832   1              static xdata char test_key_cnt = 0;   /* 主界面下选择键连按计数 added by james for v19407 */
 833   1              //static xdata char learn_key_cnt = 0; 
 834   1      
 835   1              int temp_max;   
 836   1              int iBellOnTime, iBellOffTime;
 837   1      
 838   1              static xdata unsigned int dj_key_dely = 0,dj_key_step = 0;
 839   1              //ADD by yq
 840   1              xdata char lcd_disp_buf[50*2] = {0};
 841   1              xdata unsigned char  cMenuSn;
 842   1              xdata int iLen=0,iCount=0,iTatol;
 843   1              MENU_SHOW *pLCDDataValue;
 844   1              xdata unsigned char  cLcd_data_buf[6]={0},cLcd_len_data_buf[6]={0},cLcd_count_data_buf[6]={0};
 845   1              
 846   1              
 847   1              unKey.u_bit.K1 = P24;
 848   1              unKey.u_bit.K2 = P23;
 849   1              unKey.u_bit.K3 = P22;
 850   1              unKey.u_bit.K4 = P21;
 851   1              
 852   1              unKey.u_bit.IO1 = P20;
 853   1              unKey.u_bit.IO2 = P35;
 854   1              unKey.u_bit.IO3 = P33;
 855   1              unKey.u_bit.IO4 = P32;
 856   1              unKey.u_bit.IO5 = P26;
 857   1              unKey.u_bit.IO6 = P27;
 858   1              unKey.u_bit.IO7 = P12;
 859   1              unKey.u_bit.IO8 = P13;
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 15  

 860   1              unKey.u_bit.IO9 = P16;
 861   1      
 862   1              unKey.u_bit.RED = P17;
 863   1              unKey.u_bit.GREEN = P54;
 864   1              unKey.u_bit.BLUE = P55; 
 865   1      
 866   1              Key_Val = (int)unKey.all; 
 867   1              
 868   1              //Key_Val = (P2 >> 1) & 0x0f;
 869   1              //Key_Val |= 0xf0;
 870   1              if(Key_Val != old_key) //有按键
 871   1              {
 872   2                      No_key_delay = public_val.ms_timer;
 873   2                      
 874   2                      if(!long_input_flag)
 875   2                      {
 876   3                              bell_delay = public_val.ms_timer;
 877   3                              Bell_flag |= 0x01;
 878   3                      }
 879   2                      else
 880   2                      {
 881   3                              Bell_flag &= 0xfe;
 882   3                      }
 883   2                      
 884   2                      if( (public_val.ms_timer - Read_key_dely_2) > KEY_DOU_DELY)
 885   2                      {
 886   3                              old_key = Key_Val;
 887   3                              Read_key_dely = public_val.ms_timer;
 888   3                              long_count = 0;
 889   3                              long_input_flag = 0;
 890   3                              long_key_step = 1;
 891   3                      }
 892   2                      else
 893   2                      {
 894   3                              Key_Val = 0;
 895   3                      }
 896   2                      
 897   2              }
 898   1              else
 899   1              {
 900   2                      if( (public_val.ms_timer - bell_delay) > BELL_ON_DELY)
 901   2                      {
 902   3                              Bell_flag &= 0xfe;
 903   3                      }
 904   2      
 905   2                      if( (public_val.ms_timer - No_key_delay) > NO_KEY_RETURN_MAIN)
 906   2                      {
 907   3                              No_key_delay = public_val.ms_timer;
 908   3                              
 909   3                              //if(edit_menu_id == MENU_ID_00000)
 910   3                              if ((edit_menu_id == MENU_ID_00000) && (DisplayState != ST_LEARN))
 911   3                              {
 912   4                                      DisplayState = ST_MAIN;
 913   4                                      Main_disp_other = 0;    /* added by james for v19407 */
 914   4                              }
 915   3                      }
 916   2                      
 917   2                      if( (public_val.ms_timer - Read_key_dely) > KEY_DOU_DELY)
 918   2                      {
 919   3                              Read_key_dely_2 = public_val.ms_timer;
 920   3                              
 921   3                              //if( ( (Key_Val&0xff) != 0xff) && (!long_input_flag) )
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 16  

 922   3                              if( ( (Key_Val&0xffff) != 0xffff) && (!long_input_flag) )
 923   3                              {
 924   4                                      long_count++;
 925   4                                      
 926   4                                      //if(long_count > 10)
 927   4                                      if(long_count > 100)   
 928   4                                      {                                                       
 929   5                                              long_input_flag = 1;
 930   5                                              long_key_step = 1;
 931   5                                              long_key_count = 0;
 932   5                                              Read_key_dely_3 = public_val.ms_timer; 
 933   5                                              long_count = 10;
 934   5                                      }
 935   4                              }                                       
 936   3                      }
 937   2                      else
 938   2                      {
 939   3                              Key_Val = 0;
 940   3      
 941   3                      }
 942   2              }
 943   1              
 944   1              if(long_input_flag)  /* 长按 */
 945   1              {
 946   2                      if(public_val.ms_timer - Read_key_dely_3 > KEY_LONG_DELY)
 947   2                      {
 948   3                              long_key_count ++;
 949   3                              if(long_key_count > LONG_KEY_STEP_SWITCH)
 950   3                              {
 951   4                                      long_key_step = 10;
 952   4                              }
 953   3                              if(long_key_count)
 954   3                                      Read_key_dely_3 = public_val.ms_timer;
 955   3                              Pr_Key_Val = 0xFF;
 956   3                      }
 957   2              }
 958   1              
 959   1              if(Key_Val)
 960   1              {
 961   2                      if(Key_Val != Pr_Key_Val)
 962   2                      {
 963   3                              Pr_Key_Val = Key_Val;
 964   3                      }
 965   2                      else
 966   2                      {
 967   3                              Key_Val = 0;
 968   3                      }
 969   2              }
 970   1      
 971   1      
 972   1              /* 有按键则下发按键值和按键类型 */
 973   1                      
 974   1              if ((Key_Val == KEY_IO6) || (Key_Val == KEY_IO7) 
 975   1                      || (Key_Val == KEY_IO8))
 976   1              {
 977   2                      if(public_val.Lock_Flag && (Key_Val == KEY_IO7))
 978   2                              {
 979   3                                      public_val.Err_Flag = ERR_LOCK_SYS_ERR + public_val.Lock_Flag;  //锁机错误20
 980   3                              }
 981   2                      else
 982   2                              {
 983   3                                      write_key_flag = 1;   /* 有按键，需要写按键到主板 */
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 17  

 984   3                                      
 985   3                                      gsKeyVal = Key_Val;
 986   3                                      gcKeyType = KEY_SHORT_UP_FLAG;                          
 987   3                              }
 988   2      
 989   2              }
 990   1      
 991   1              //打胶按键单独处理。
 992   1              switch(dj_key_step)
 993   1                      {
 994   2                              case 0:
 995   2                                      if(!P14)
 996   2                                      {
 997   3                                              dj_key_step = 10;
 998   3                                              dj_key_dely = public_val.ms_timer;
 999   3                                      }
1000   2                              break;
1001   2                              case 10:
1002   2                                      if(!P14)
1003   2                                              {
1004   3                                                      if(public_val.ms_timer - dj_key_dely > 100)
1005   3                                                              {
1006   4                                                                      dj_key_step = 20;
1007   4                                                              }
1008   3                                              }
1009   2                                      else
1010   2                                              {
1011   3                                                      dj_key_step = 0;
1012   3                                              }
1013   2                              break;
1014   2                              case 20:
1015   2                                      if(P14)
1016   2                                              {
1017   3                                                      write_key_flag = 1;   /* 有按键，需要写按键到主板 */
1018   3                                                      gsKeyVal = KEY_DJ;
1019   3                                                      gcKeyType = KEY_SHORT_UP_FLAG;
1020   3                                                      dj_key_step = 0;
1021   3                                              }
1022   2                              break;
1023   2                      }
1024   1                      
1025   1              //按键状态显示  add by yq
1026   1              if(LCDChildDisplayState != 8)
1027   1              switch(Key_Val)
1028   1              {
1029   2                      case 0xFFFF://无按键
1030   2                              break;
1031   2                      case KEY_K1: //选择
1032   2                              if(LCDChildDisplayState == 2  ||  LCDChildDisplayState == 3)
1033   2                              {
1034   3                                      LCDDisplayState = 0x00;
1035   3                                      LCDChildDisplayState = 0;
1036   3                              }
1037   2                              if(g_iErrStatus == 1)
1038   2                                      g_iErrUIChange =1;
1039   2                              break;
1040   2                      case KEY_K4:           /* 确认 */
1041   2                              if(LCDChildDisplayState == 2 || LCDChildDisplayState == 3 && DisplayState == ST_MAIN)//如果处于主界面的
             -子界面有按键就返回
1042   2                              {                       
1043   3                                      LCDChildDisplayState =0;
1044   3                                      LCDDisplayState = 0x00;
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 18  

1045   3                              }
1046   2                              else if(LCDChildDisplayState == 0 && DisplayState == ST_MAIN)
1047   2                                      LCDChildDisplayState = 1;
1048   2                              if(g_iErrStatus == 1)
1049   2                                      g_iErrUIChange =1;      
1050   2                              break;
1051   2                      case KEY_IO1:          /* 进纸 */
1052   2                              g_pcStatus = "进纸";
1053   2                              break;
1054   2                      case KEY_IO2:              /* 退纸 */
1055   2                              g_pcStatus = "退纸";
1056   2                              break;
1057   2                      case KEY_IO3:          /* 切纸 */
1058   2                              //g_pcStatus = "切纸";
1059   2                              
1060   2                              if(g_iErrStatus == 1)
1061   2                                      g_iErrUIChange =1;
1062   2                              
1063   2                              LCDChildDisplayState =8;
1064   2                              break;
1065   2                      case KEY_IO4:              /* 下料 */
1066   2                              g_pcStatus = "下料";
1067   2                              break;
1068   2                      case KEY_IO5:          /* 搓条 */
1069   2                              g_pcStatus = "搓条";
1070   2                              break;
1071   2                      case KEY_IO6:          /* 停止送纸 */
1072   2                              g_pcStatus = "停纸";    
1073   2                              break;
1074   2                      case KEY_IO7:          /* 启动 */
1075   2                              g_pcStatus = "启动";
1076   2                              break;
1077   2                      case KEY_IO8:          /* 停止 */
1078   2                              g_pcStatus = "停止";
1079   2                              break;
1080   2                      case KEY_IO9:          /* 发纸 */
1081   2                              g_pcStatus = "发纸";
1082   2                              break;
1083   2                      case KEY_RED:          /* 收纸 */
1084   2                              g_pcStatus = "收纸";
1085   2                              break;
1086   2                      case KEY_GREEN:            /* 纸长 */
1087   2                              if(g_iErrStatus == 1)
1088   2                                      g_iErrUIChange =1;
1089   2                              break;
1090   2                      case KEY_BLUE:         /* 捆数 */
1091   2                              if(g_iErrStatus == 1)
1092   2                                      g_iErrUIChange =1;
1093   2                              break;
1094   2                      case KEY_DJ:        /* 打胶 */
1095   2                              g_pcStatus= "打胶";
1096   2                              break;
1097   2                      default:
1098   2                              
1099   2                              break;
1100   2              }
1101   1          switch(DisplayState)
1102   1              {
1103   2                  case ST_MAIN:   /* 主界面 */
1104   2                  {
1105   3                      switch(Key_Val)
1106   3                          {
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 19  

1107   4                              case KEY_SEL:
1108   4      
1109   4                                              test_key_cnt = 0;
1110   4                                              //learn_key_cnt = 0;
1111   4      
1112   4                                              if(Main_disp_other == 0)
1113   4                                              {
1114   5                                          PasswordBuff[0] = '0';
1115   5                                          PasswordBuff[1] = '0';
1116   5                                          PasswordBuff[2] = '0';
1117   5                                          PasswordBuff[3] = '0';  
1118   5                                          PasswordBuff[4] = '0';  
1119   5                                          DisplayBitNum = 4;
1120   5      
1121   5                                                      LEDShowFlashString(&PasswordBuff[0],0);
1122   5                                          DisplayState = ST_PASSWORD;
1123   5      
1124   5                                                      return;
1125   5                                              }
1126   4                                              else
1127   4                                              {
1128   5                                                      if (qz_wait == 1)
1129   5                                                      {
1130   6                                                              qz_wait = 0;   // 清等待状态
1131   6      
1132   6                                                              war_bell_step = 0;  // 清除蜂鸣器响声
1133   6                                                              cPauseBell = 0;                                                 
1134   6                                                      }
1135   5                                                      
1136   5                                                      Main_disp_other = 0;
1137   5                                              }
1138   4                                                                                      
1139   4                                              
1140   4                                  break;      
1141   4                                              
1142   4                              case KEY_REDUCE:         //减号
1143   4                              
1144   4                                              test_key_cnt = 0;
1145   4                                              //learn_key_cnt = 0;
1146   4                                              
1147   4                                              if (long_input_flag && (Main_disp_other == 0))
1148   4                                              {
1149   5                                                      if(public_val.work_count_user != public_val.work_count)
1150   5                                                              {
1151   6                                                                      public_val.work_count_user = public_val.work_count;
1152   6                                                                      write_clear_cnt_flag = 1;    /* 发送命令至主板清除开机后计数 */
1153   6                                                                      save_user_count();
1154   6                                                              }
1155   5                                              }                                       
1156   4      
1157   4                                              if (speed_mode == 1)  //高速
1158   4                                              {
1159   5                                                      write_speed_mode_flag = 1;  
1160   5                                                      speed_mode = 0;   //切到低速
1161   5                                              }
1162   4                                      
1163   4                                              break;  
1164   4                                              
1165   4                              case KEY_INCREASE:       //加号
1166   4      
1167   4                                              test_key_cnt = 0;
1168   4                                              
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 20  

1169   4                                              Main_adj_key_delay = public_val.ms_timer;                                       
1170   4                                              Main_disp_other = 5;
1171   4                                              if (speed_mode == 0)  //低速
1172   4                                              {
1173   5                                                      write_speed_mode_flag = 1;  
1174   5                                                      speed_mode = 1;  //切到高速
1175   5                                              }
1176   4      #if 0
                                                      if (Main_disp_other == 0)
                                                      {
                                                              /* 进入参数菜单 */
                                                          pMenu = pItem[0].m_pcfg;    // 指向数据                             
                                                              now_menu.menu_id = 0;
                                                              now_menu.par_id = 0;
                                                              now_menu.event_flag = 1;
                                              DisplayItemNum  = 0;
              
                                                              //DisplayMenuTotal = Menu_Number[0];
                                                              DisplayMenuTotal = Menu0_Number;
                                                              if(DisplayMenuTotal > 0)
                                                      DisplayState=ST_MENU;                                                           //进入相应菜单  
                                          return;
                                                      }
              #endif                                          
1193   4                                                                                      
1194   4                                              break;  
1195   4      
1196   4                              case KEY_GREEN:          //纸长
1197   4      
1198   4                                              test_key_cnt = 0;
1199   4                                              
1200   4                                              if (Main_disp_other == 0)
1201   4                                              {
1202   5                                                      /* 进入参数菜单 */
1203   5                                                  pMenu = pItem[0].m_pcfg;    // 指向数据     
1204   5                                                      now_menu.menu_id = 0;
1205   5                                                      now_menu.par_id = 0;
1206   5                                                      now_menu.event_flag = 1;
1207   5                                      DisplayItemNum  = 0;
1208   5                                                      zc_key_flag = 1;
1209   5                                                      //DisplayMenuTotal = Menu_Number[0];
1210   5                                                  edit_menu_id = 0;
1211   5                                                      DisplayMenuTotal = pItem[edit_menu_id].MenuItem_Max;;
1212   5                                                      if(DisplayMenuTotal > 0)
1213   5                                              DisplayState=ST_MENU;                                                           //进入相应菜单                                                  
1214   5                                  return;
1215   5                                              }
1216   4                                                                                      
1217   4                                              break;  
1218   4      
1219   4                              case KEY_BLUE:           //捆数
1220   4      
1221   4                                              test_key_cnt = 0;
1222   4                                              
1223   4                                              if (Main_disp_other == 0)
1224   4                                              {
1225   5                                                      /* 进入参数菜单 */
1226   5                                                  pMenu = pItem[0].m_pcfg;    // 指向数据                             
1227   5                                                      now_menu.menu_id = 0;
1228   5                                                      now_menu.par_id = 1;
1229   5                                                      now_menu.event_flag = 1;
1230   5                                      DisplayItemNum  = 1;                    
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 21  

1231   5                                                      zc_key_flag = 1;
1232   5                                                      //DisplayMenuTotal = Menu_Number[0];
1233   5                                                  edit_menu_id = 0;
1234   5                                                      DisplayMenuTotal = pItem[edit_menu_id].MenuItem_Max;;
1235   5                                                      if(DisplayMenuTotal > 0)
1236   5                                              DisplayState=ST_MENU;                                                           //进入相应菜单  
1237   5                                                      
1238   5                                  return;
1239   5                                              }
1240   4                                                                                      
1241   4                                              break;  
1242   4      
1243   4                                              
1244   4                              case KEY_ENT:   //查看程序版本
1245   4      
1246   4                                              if (qz_wait == 0)  //不是切纸等待状态
1247   4                                              {
1248   5                                                      //learn_key_cnt = 0;
1249   5      
1250   5                                                      if (long_input_flag)
1251   5                                                      {                                               
1252   6                                                              if (test_key_cnt < TEST_MODE_CNT)
1253   6                                                              {
1254   7                                                                      test_key_cnt++;
1255   7                                                              }
1256   6                                                      }
1257   5                                                      else
1258   5                                                      {
1259   6                                                              test_key_cnt = 0;
1260   6                                                      }
1261   5                                                      
1262   5                                                      Main_adj_key_delay = public_val.ms_timer;
1263   5                                                      Main_disp_other = 2;
1264   5                                              } 
1265   4                                              else   // 切纸等待状态
1266   4                                              {
1267   5                                                      write_key_flag = 1;   /* 有按键，需要写按键到主板 */
1268   5      
1269   5                                                      // 下发切纸命令
1270   5                                                      gsKeyVal = KEY_IO3;
1271   5                                                      gcKeyType = KEY_SHORT_UP_FLAG; 
1272   5                                                      
1273   5                                                      Main_disp_other = 0;  // 返回显示筒数
1274   5                                                      qz_wait = 0;   // 清等待状态
1275   5      
1276   5                                                      war_bell_step = 0;  // 清除蜂鸣器响声
1277   5                                                      cPauseBell = 0;
1278   5                                                      
1279   5                                              }
1280   4                                              //add by yq;
1281   4                                              
1282   4                                              
1283   4                                              break;          
1284   4      
1285   4                                      case KEY_IO3:   // 切纸
1286   4      
1287   4                                              if (qz_wait == 0)  //未等待切纸
1288   4                                              {
1289   5                                                      write_warning_flag = 1;   // 下发报警消息
1290   5                                                      
1291   5                                                      //进入切纸等待
1292   5                                                      Main_disp_other = 4;
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 22  

1293   5                                                      qz_wait = 1;                                            
1294   5                                              }
1295   4                                              
1296   4                                              break;
1297   4                                              
1298   4                          }
1299   3              
1300   3                              if(Main_disp_other == 0)  /* 返回主界面 */
1301   3                              {
1302   4                                      TempCount = main_menu_cfg[0].m_rate;  
1303   4                                      TempDataB = DisplayItemNum;
1304   4                              
1305   4                                      if(!public_val.Err_Flag)                                //无报错
1306   4                                      {
1307   5                                              if(!public_val.Work_Pause_Flag)     /* 无暂停，刷新显示当前已洗饼数 */
1308   5                                              {
1309   6                                                      if(public_val.Bell_Flag == YES)   /* 蜂鸣器长暂停响 added for v19416 */
1310   6                                                      {
1311   7                                                              cPauseBell = 1;
1312   7                                                              if(!war_bell_step) war_bell_step = 1;
1313   7                                                      }
1314   6                                                      else
1315   6                                                      {
1316   7                                                              Bell_flag &= 0xfd;
1317   7                                                      }
1318   6                                                      public_val.main_disp_val = public_val.work_count - public_val.work_count_user;
1319   6                                                      DisplayValueTemp = (long)public_val.main_disp_val; 
1320   6                                                      TempValue=DataToStr(&DisplayValueTemp,
1321   6                                                                          INT32_SIZE,
1322   6                                                                                              5,
1323   6                                                                                              0,
1324   6                                                                                              DisplayBuff,0,TY_D );           
1325   6                                                      LED_ShowNumber(&DisplayBuff[0],0);
1326   6                                                      
1327   6                                                      //Bell_flag &= 0xfd;   
1328   6      
1329   6                                                      
1330   6                                              }
1331   5                                              else
1332   5                                              {
1333   6                                                      LEDShowFlashString("P--",0);                                            //显示项目名称内容
1334   6                                                      DisplayValueTemp = public_val.Work_Pause_Flag & 0x7F;
1335   6                                                      if(public_val.Work_Pause_Flag & 0x80)
1336   6                                                              {
1337   7                                                                      if(!war_bell_step) war_bell_step = 1;
1338   7                                                              }
1339   6                                                      TempValue=DataToStr(&DisplayValueTemp,
1340   6                                                                          INT32_SIZE,
1341   6                                                                                              5,
1342   6                                                                                              0,
1343   6                                                                                              DisplayBuff,0,TY_D );           
1344   6                                                      LED_ShowNumber(&DisplayBuff[3],3);      
1345   6      
1346   6                                                      cPauseBell = 1;
1347   6      
1348   6                                              }
1349   5                                      }
1350   4                                      else
1351   4                                      {
1352   5                              
1353   5                                              if ((public_val.Err_Flag == P_FINISH_LEARN1)
1354   5                                                      || (public_val.Err_Flag == P_FINISH_LEARN2)) 
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 23  

1355   5                                              {
1356   6                                                      //学习完成也显示送纸计数
1357   6                                                      if(public_val.Bell_Flag == YES)   /* 蜂鸣器长暂停响 added for v19416 */
1358   6                                                      {
1359   7                                                              cPauseBell = 1;
1360   7                                                              if(!war_bell_step) war_bell_step = 1;
1361   7                                                      }
1362   6                                                      else
1363   6                                                      {
1364   7                                                              Bell_flag &= 0xfd;
1365   7                                                      }
1366   6                                                      
1367   6                                                      DisplayValueTemp = (long)public_val.main_disp_val; 
1368   6                                                      TempValue=DataToStr(&DisplayValueTemp,
1369   6                                                                          INT32_SIZE,
1370   6                                                                                              5,
1371   6                                                                                              0,
1372   6                                                                                              DisplayBuff,0,TY_D );           
1373   6                                                      LED_ShowNumber(&DisplayBuff[0],0);
1374   6      
1375   6                                                      
1376   6                                              }
1377   5                                              else             // 正常报错                    
1378   5                                              {
1379   6                                                      LEDShowFlashString("E--",0);            /* modified by james at 2014-4-12 */
1380   6                                                      
1381   6                                                      if(!war_bell_step) 
1382   6                                                              war_bell_step = 1;
1383   6                                                      
1384   6                                                      DisplayValueTemp = public_val.Err_Flag;
1385   6                                                      TempValue=DataToStr(&DisplayValueTemp,
1386   6                                                                          INT32_SIZE,
1387   6                                                                                              5,
1388   6                                                                                              0,
1389   6                                                                                              DisplayBuff,0,TY_D );           
1390   6                                                      LED_ShowNumber(&DisplayBuff[3],3);              
1391   6      
1392   6                                                      cPauseBell = 0;
1393   6                                              }
1394   5                                      }
1395   4      
1396   4                                      if(l_stop_poll)                                                                                         //循环显示
1397   4                                      if(++CycShowCount > main_menu_cfg[0].m_time)                            //---------------周期计数器判断     
1398   4                                      {
1399   5                                          CycShowCount=0;
1400   5                                              DisplayItemNum++;
1401   5                                              TempCount = 0; 
1402   5                                      }
1403   4                              }
1404   3                              else if(Main_disp_other == 2)    /* 显示版本号 */
1405   3                              {
1406   4                                      DisplayValueTemp = public_val.version;
1407   4                                      //DisplayValueTemp = public_val.input_pass_mask;
1408   4                                      TempValue=DataToStr(&DisplayValueTemp,
1409   4                                                          INT32_SIZE,
1410   4                                                                              5,
1411   4                                                                              0,
1412   4                                                                              DisplayBuff,0,TY_D );           
1413   4                                      LED_ShowNumber(&DisplayBuff[0],0);      
1414   4                                      if( (public_val.ms_timer - Main_adj_key_delay) > MAIN_ADJ_DELAY)
1415   4                                      {
1416   5                                              Main_disp_other = 3;
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 24  

1417   5                                      }
1418   4                              }
1419   3                              else if(Main_disp_other == 3)    /* 显示传感器等输入IO值 */
1420   3                              {
1421   4                                      DisplayValueTemp = (long)public_val.io_read;
1422   4                                      //DisplayValueTemp &= 0xff;
1423   4                                      DisplayValueTemp &= 0xffff;
1424   4                                      TempValue=DataToStr(&DisplayValueTemp,
1425   4                                                          INT32_SIZE,
1426   4                                                                              5,
1427   4                                                                              0,
1428   4                                                                              DisplayBuff,0,TY_D );           
1429   4                                      LED_ShowNumber(&DisplayBuff[0],0);      
1430   4                              }
1431   3                              else if (Main_disp_other == 4)    /* 切纸等待 */
1432   3                              {
1433   4                                      LEDShowFlashString("Q2---",0);
1434   4      
1435   4                                      if(!war_bell_step) 
1436   4                                              war_bell_step = 1;                                              
1437   4      
1438   4                                      cPauseBell = 1;         
1439   4                              }
1440   3                              else if(Main_disp_other == 5)    /* 显示传感器等输入IO值 */
1441   3                              {
1442   4                                      DisplayValueTemp = (long)public_val.password_index_disp;
1443   4                                      //DisplayValueTemp = (long)(public_val.password_val[0] << 8) + public_val.password_val[1];
1444   4                                      //DisplayValueTemp &= 0xff;
1445   4                                      DisplayValueTemp &= 0xffff;
1446   4                                      TempValue=DataToStr(&DisplayValueTemp,
1447   4                                                          INT32_SIZE,
1448   4                                                                              5,
1449   4                                                                              0,
1450   4                                                                              DisplayBuff,0,TY_D );           
1451   4                                      LED_ShowNumber(&DisplayBuff[0],0);      
1452   4                              }
1453   3                  }
1454   2      
1455   2                      if (test_key_cnt == TEST_MODE_CNT)  /* 长按计数后进入测试参数设置界面 added by james for v19407 */
1456   2                      {
1457   3                              test_key_cnt = 0;
1458   3                              DisplayState = ST_TEST;
1459   3                              Main_disp_other = 4;
1460   3                              
1461   3                              test_set_display(test_mode);
1462   3                      }               
1463   2      
1464   2              #if 0
                              if (learn_key_cnt == LEARN_MODE_CNT)  /* 长按计数后进入测试参数设置界面 added by james for v19407 */
                              {
                                      learn_key_cnt = 0;
                                      DisplayState = ST_LEARN;
                                      Main_disp_other = 0;    
                                      
                                      LEDShowFlashString("P-- 0",0);
              
                                      public_val.Err_Flag = 0;   
              
                                      write_learn_mode_flag = 1;  
                              }       
                      #endif
1478   2                      
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 25  

1479   2                  break;
1480   2      
1481   2      
1482   2                      case ST_PASSWORD://---------------------------------------------密码输入界面
1483   2      
1484   2                      switch(Key_Val)
1485   2                          {
1486   3                              case KEY_SEL:
1487   3                                  DisplayItemNum = 0;                 
1488   3                                              //DisplayItemNum0 = 0;
1489   3                                              //DisplayItemNum1 = 0;
1490   3                                  DisplayState = ST_MAIN;
1491   3                                  return;  
1492   3                                  break;      
1493   3                              case KEY_REDUCE:
1494   3                                      if(--DisplayBitNum < 0)
1495   3                                          DisplayBitNum=4;            
1496   3                                  break;      
1497   3                              case KEY_INCREASE:
1498   3                                      if( ++PasswordBuff[DisplayBitNum] > '9')
1499   3                                          PasswordBuff[DisplayBitNum]='0';                    
1500   3                                  break;      
1501   3                              case KEY_ENT:
1502   3                                  for(TempCountB=1;TempCountB<MenuTotals;TempCountB++)
1503   3                                  {
1504   4                                      if(PasswordBuff[0]==pItem[TempCountB].m_pass[0])//
1505   4                                      if(PasswordBuff[1]==pItem[TempCountB].m_pass[1])//
1506   4                                      if(PasswordBuff[2]==pItem[TempCountB].m_pass[2])//
1507   4                                      if(PasswordBuff[3]==pItem[TempCountB].m_pass[3])//
1508   4                                      if(PasswordBuff[4]==pItem[TempCountB].m_pass[4])//密码符合要求
1509   4                                      {
1510   5                                              if(TempCountB == MENU_ID_10104)
1511   5                                                      {
1512   6                                                              if(  ((public_val.Disp_Dz_10103[10] == 0)     //密码6为空或者校验成功，允许进入10104
1513   6                                                                                      &&(public_val.Disp_Dz_10103[11] == 0))
1514   6                                                                                      ||(public_val.input_pass_mask & 0x20)
1515   6                                                                                      ||(public_val.Disp_Dz_10104[PASS_LOCK_COUNT - 1] == 0)
1516   6                                                                                 )
1517   6                                                                      {
1518   7                                                                              ;
1519   7                                                                      }
1520   6                                                                              else
1521   6                                                                                      return;
1522   6                                                      }
1523   5                                                              edit_menu_id = TempCountB; 
1524   5                                                          pMenu = pItem[TempCountB].m_pcfg;                                   
1525   5                                                              now_menu.menu_id = edit_menu_id;
1526   5                                                              now_menu.par_id = 0;
1527   5                                                              now_menu.event_flag = 1;
1528   5                                          DisplayItemNum  = 0;                                        
1529   5                                                              DisplayMenuTotal = pItem[edit_menu_id].MenuItem_Max;
1530   5                                                              if(DisplayMenuTotal > 0)
1531   5                                              DisplayState=ST_MENU;                                                           //进入相应菜单
1532   5                                                              //add by yq
1533   5                                                              if(DisplayMenuTotal > 20)
1534   5                                                                      DisplayMenuTotal = 20;
1535   5                                                              cMenuSn = 10;
1536   5                                          return;
1537   5                                      }                
1538   4                                  }
1539   3                                              return;
1540   3                                  break;      
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 26  

1541   3                          }
1542   2                      if( flash_flag  && !long_input_flag  )                                                                                          //闪烁功能
1543   2                      {       
1544   3                          LEDClearChar(DisplayBitNum, 1);
1545   3                      }
1546   2                      else
1547   2                      {
1548   3                          LEDShowFlashString(&PasswordBuff[0], 0);            
1549   3                      }               
1550   2                  
1551   2                              break;
1552   2      
1553   2                      case ST_LEARN:
1554   2      
1555   2                              switch(Key_Val) 
1556   2                          {
1557   3                              case KEY_SEL:  // 选择键返回
1558   3                                      Main_disp_other = 0;
1559   3                                              DisplayBitNum = 4;
1560   3                                              CycShowCount  = 0;
1561   3                                              now_menu.menu_id = 888;
1562   3                                              now_menu.event_flag = 1;
1563   3                                  DisplayItemNum = 0; 
1564   3                                  DisplayState   = ST_MAIN;                                                                                   //返回主界面
1565   3                                  
1566   3                                              war_bell_step = 0;  // 清除蜂鸣器响声
1567   3                                              cPauseBell = 0;
1568   3      
1569   3                                              return;
1570   3                                              
1571   3                                              break;  
1572   3                                              
1573   3                                      default:
1574   3                                              break;
1575   3                              }
1576   2      
1577   2                              if ((public_val.Err_Flag == P_FINISH_LEARN1)
1578   2                                      || (public_val.Err_Flag == P_FINISH_LEARN2))
1579   2                              {
1580   3                                      if (public_val.Err_Flag == P_FINISH_LEARN1)    // 学习完成
1581   3                                      {
1582   4                                              LEDShowFlashString("P-- 1",0);
1583   4      
1584   4                                              if(!war_bell_step) 
1585   4                                                      war_bell_step = 1;                                              
1586   4      
1587   4                                              cPauseBell = 1;                                         
1588   4                                      }
1589   3                                      else if (public_val.Err_Flag == P_FINISH_LEARN2)    // 学习完成
1590   3                                      {
1591   4                                              LEDShowFlashString("P-- 2",0);
1592   4      
1593   4                                              if(!war_bell_step) 
1594   4                                                      war_bell_step = 1;                                              
1595   4      
1596   4                                              cPauseBell = 1;                                         
1597   4                                      }
1598   3                              }       
1599   2                              else
1600   2                              {
1601   3                                      LEDShowFlashString("P-- 0",0);
1602   3                                      war_bell_step = 0;
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 27  

1603   3                                      cPauseBell = 0; 
1604   3                              }
1605   2      
1606   2                              break;
1607   2      
1608   2                      case ST_TEST:        /* 测试参数设置界面响应 added by james for v19407 */
1609   2                              switch(Key_Val)
1610   2                          {
1611   3                              case KEY_SEL:
1612   3                                      Main_disp_other = 0;
1613   3                                              DisplayBitNum = 4;
1614   3                                              CycShowCount  = 0;
1615   3                                              now_menu.menu_id = 888;
1616   3                                              now_menu.event_flag = 1;
1617   3                                  DisplayItemNum = 0; 
1618   3                                  DisplayState   = ST_MAIN;                                                                                   //返回主界面
1619   3                                  break;      
1620   3      
1621   3                                      case KEY_INCREASE:
1622   3                                              if (test_mode < 1)
1623   3                                              {
1624   4                                                      test_mode++;
1625   4      
1626   4                                                      write_test_mode_flag = 1;  /* 写测试模式到主板 */
1627   4                                              }
1628   3                                              test_set_display(test_mode);
1629   3                                              
1630   3                                              if (test_mode > 0)  /* 测试模式 */
1631   3                                              {
1632   4                                                      //ResetDoorForTest();
1633   4                                              }                                       
1634   3                                              break;
1635   3      
1636   3                                      case KEY_REDUCE:
1637   3                                              if (test_mode > 0)
1638   3                                              {
1639   4                                                      test_mode--;
1640   4      
1641   4                                                      write_test_mode_flag = 1;  /* 写测试模式到主板 */                                               
1642   4                                              }
1643   3                                              test_set_display(test_mode);                                    
1644   3                                              break;
1645   3      
1646   3                                      case KEY_IO7:  // 启动
1647   3                                              LEDShowFlashString("   11",0);
1648   3                                              break;
1649   3      
1650   3                                      case KEY_IO8:  // 停止
1651   3                                              LEDShowFlashString("   12",0);
1652   3                                              break;
1653   3      
1654   3                                      case KEY_RED:  // 收纸
1655   3                                              LEDShowFlashString("   13",0);
1656   3                                              break;
1657   3      
1658   3                                      case KEY_IO9:  // 发纸
1659   3                                              LEDShowFlashString("   14",0);
1660   3                                              break;
1661   3      
1662   3                                      case KEY_IO2:  // 退纸
1663   3                                              LEDShowFlashString("   15",0);
1664   3                                              break;
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 28  

1665   3      
1666   3                                      case KEY_IO1:  // 进纸
1667   3                                              LEDShowFlashString("   16",0);
1668   3                                              break;
1669   3      
1670   3                                      case KEY_IO4:  // 下料
1671   3                                              LEDShowFlashString("   17",0);
1672   3                                              break;
1673   3      
1674   3                                      case KEY_IO5:  // 搓条
1675   3                                              LEDShowFlashString("   18",0);
1676   3                                              break;
1677   3      
1678   3                                      case KEY_IO6:  // 停止送纸
1679   3                                              LEDShowFlashString("   19",0);
1680   3                                              break;
1681   3      
1682   3                                      case KEY_IO3:  // 切纸
1683   3                                              LEDShowFlashString("   20",0);
1684   3                                              break;
1685   3                                              
1686   3                                      case KEY_GREEN:  // 纸长
1687   3                                              LEDShowFlashString("   21",0);
1688   3                                              break;
1689   3      
1690   3                                      case KEY_BLUE:  // 捆数
1691   3                                              LEDShowFlashString("   22",0);
1692   3                                              break;
1693   3                                              
1694   3                                      default:
1695   3                                              break;
1696   3                              }
1697   2      
1698   2      
1699   2                      break;
1700   2      
1701   2                  case ST_MENU:                       /* 菜单数据查看 */
1702   2                  { 
1703   3                      switch(Key_Val)
1704   3                          {
1705   4                              case KEY_SEL:
1706   4                                      Main_disp_other = 0;
1707   4                                              DisplayBitNum = 4;
1708   4                                              CycShowCount  = 0;
1709   4                                              now_menu.menu_id = 888;
1710   4                                              now_menu.event_flag = 1;
1711   4                                  DisplayItemNum = 0; 
1712   4                                  DisplayState   = ST_MAIN;                                                                                   //返回主界面
1713   4                                              //DIS_OPTIONING=0;
1714   4                                  break;      
1715   4                              case KEY_REDUCE:
1716   4                                  if (DisplayItemNum-- == 0)
1717   4                                      DisplayItemNum = DisplayMenuTotal-1;    
1718   4                                              now_menu.par_id = DisplayItemNum;
1719   4                                              
1720   4                                              now_menu.par_id = DisplayItemNum;
1721   4                                              now_menu.event_flag = 1;
1722   4                                              //add by yq
1723   4                                              if (cMenuSn-- <= 10)
1724   4                                                      cMenuSn = 29;
1725   4                                  break;      
1726   4                              case KEY_INCREASE:
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 29  

1727   4      
1728   4                                  if (++DisplayItemNum >= DisplayMenuTotal) 
1729   4                                      DisplayItemNum = 0;     
1730   4      
1731   4                                              now_menu.par_id = DisplayItemNum;
1732   4                                              now_menu.event_flag = 1;
1733   4                                              //add by yq
1734   4                                              if (cMenuSn++ >= 29)
1735   4                                                      cMenuSn = 10;
1736   4                                  break;      
1737   4                              case KEY_ENT:   
1738   4                                              if(
1739   4                                                      (now_menu.menu_id == MENU_ID_10104)  //设定数校验是否有权限修改
1740   4                                                      )
1741   4                                                      {
1742   5                                                              if(public_val.input_pass_mask & (1<<DisplayItemNum))
1743   5                                                                      {
1744   6                                                                              zc_key_flag = 5;
1745   6                                                                      }
1746   5                                                      }
1747   4                                              else if(now_menu.menu_id == MENU_ID_10103)
1748   4                                                      {
1749   5                                                              if(public_val.input_pass_mask & (1<<(DisplayItemNum>>1)))
1750   5                                                                      {
1751   6                                                                              zc_key_flag = 5;
1752   6                                                                      }
1753   5                                                      }
1754   4                                              else
1755   4                                                      {
1756   5                                                              zc_key_flag = 5;
1757   5                                                      }
1758   4                                  break;                      
1759   4                          }        
1760   3      
1761   3                              //纸长按键特殊处理
1762   3                              //////////////////////////////////////////////////////////////////////////////////////
1763   3                              if (now_menu.menu_id == 0 && zc_key_flag)
1764   3                                      {
1765   4                                              zc_key_flag ++;
1766   4                                      }
1767   3      
1768   3                              if(zc_key_flag == 5)
1769   3                                      {
1770   4                                              zc_key_flag = 0;
1771   4                                          TempDataB = DisplayItemNum;
1772   4                                              if (TY_D == TY_B  || 
1773   4                                                      TY_D == TY_D  ||  
1774   4                                                      TY_D == TY_H)                                                                   //数值类
1775   4                                              {
1776   5                                                      DisplayBitNum = 4;
1777   5                                                      DataType=TY_D;
1778   5      
1779   5                                                      //锁机相关操作特殊处理
1780   5                                                      if( (now_menu.menu_id == MENU_ID_10103)                 //未解锁不显示密码
1781   5                                                          && (!(public_val.input_pass_mask & (1<<(DisplayItemNum>>1)))) //锁定状态下锁机参数全部显示为0
1782   5                                                              )
1783   5                                                              TempInputData = 0;
1784   5                                                  else
1785   5                                                      TempInputData = *(int *)pDataValue->m_data_vale;                        
1786   5      
1787   5                                                      DisplayState=ST_DATA_INPUT;                                                                             //进入参数输入界面
1788   5      
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 30  

1789   5                                                      pDataValue=&pMenu[TempDataB];
1790   5                                                      DataType=TY_D;
1791   5                                                      TempValue=DataToStr(pDataValue->m_data_vale,
1792   5                                                                      INT16_SIZE,
1793   5                                                                                          DEFAUT_POSE,
1794   5                                                                                          DEFAUT_POT,
1795   5                                                                                          DisplayBuff,0,DataType);                            
1796   5                                                      
1797   5                                                      InputDataLen = DEFAUT_POSE+DEFAUT_POT;
1798   5                                                      //DisplayBitNum = InputDataLen - 1; 
1799   5                                                      PasswordBuff[0] = '0';
1800   5                                                      PasswordBuff[1] = '0';
1801   5                                                      switch(InputDataLen)
1802   5                                                      {       /*用于复制显示缓冲区数据*/                                  
1803   6                                                      case 3:
1804   6                                                              PasswordBuff[2]=DisplayBuff[TempValue];
1805   6                                                              if(PasswordBuff[2] == ' ') PasswordBuff[2] = '0';
1806   6                                                              PasswordBuff[3]=DisplayBuff[TempValue+1];
1807   6                                                              if(PasswordBuff[3] == ' ') PasswordBuff[3] = '0';
1808   6                                                              PasswordBuff[4]=DisplayBuff[TempValue+2];                               
1809   6                                                          break;                      
1810   6                                                      case 2:
1811   6                                                              PasswordBuff[2]=' ';
1812   6                                                              PasswordBuff[3]=DisplayBuff[TempValue+1];
1813   6                                                              if(PasswordBuff[3] == ' ') PasswordBuff[3] = '0';
1814   6                                                              PasswordBuff[4]=DisplayBuff[TempValue+2];                               
1815   6                                                          break;              
1816   6                                                      case 1:
1817   6                                                              PasswordBuff[2]=' ';
1818   6                                                              PasswordBuff[3]=' ';
1819   6                                                              PasswordBuff[4]=DisplayBuff[TempValue+2];
1820   6                                                              break;                          
1821   6                                                      }
1822   5                                                      pr_long_input_flag = 0;
1823   5                                                      //pDataValue.m_max = 999;
1824   5                                                      //pDataValue.m_min = 0;
1825   5                                                      DisplayState=ST_DATA_INPUT;                                                                             //进入参数输入界面
1826   5                                              }       
1827   4                                      }
1828   3                              //////////////////////////////////////////////////////////////////////////////////////
1829   3                                      
1830   3                              if(TempCount > 0)           
1831   3                              {       
1832   4                                      TempCount-- ;
1833   4                                      break;          
1834   4                              }
1835   3                              TempCount = main_menu_cfg[0].m_rate;  
1836   3      
1837   3                          pDataValue=&pMenu[DisplayItemNum];  
1838   3      //密码校验成功，进入菜单显示内容，以及翻动参数显示内容
1839   3      #if MENU_PASS_ON
1840   3                              //锁机相关操作特殊处理
1841   3                              if( (now_menu.menu_id == MENU_ID_10103)                 //未解锁不显示密码
1842   3                                  && (!(public_val.input_pass_mask & (1<<(DisplayItemNum>>1)))) //锁定状态下锁机参数全部显示为0
1843   3                                      )
1844   3                                      TempInputData = 0;
1845   3                          else
1846   3      #endif                          
1847   3                              TempInputData = *(int *)pDataValue->m_data_vale;                        
1848   3      
1849   3                              LEDShowCaption(DisplayItemNum);
1850   3      
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 31  

1851   3                              TempValue=DataToStr(&TempInputData,   //pDataValue->m_data_vale
1852   3                                                  INT32_SIZE,      //pDataValue->m_size,
1853   3                                                                      DEFAUT_POSE,
1854   3                                                                      DEFAUT_POT,
1855   3                                                                      DisplayBuff,0,TY_D );           
1856   3                              LED_ShowNumber(&DisplayBuff[TempValue],2);
1857   3                  }
1858   2                  break;
1859   2      
1860   2                  case ST_DATA_INPUT: /* 数据输入画面 */
1861   2                  {
1862   3                      switch(Key_Val)
1863   3                          {
1864   4                              case KEY_SEL:   
1865   4                                              if (now_menu.menu_id == 0)
1866   4                                                      {
1867   5                                                      Main_disp_other = 0;
1868   5                                                              DisplayBitNum = 4;
1869   5                                                              CycShowCount  = 0;
1870   5                                                              now_menu.menu_id = 888;
1871   5                                                              now_menu.event_flag = 1;
1872   5                                                  DisplayItemNum = 0; 
1873   5                                                  DisplayState   = ST_MAIN;                                                                                   //返回主界面
1874   5                                                      }
1875   4                                              else
1876   4                                              DisplayState = ST_MENU;
1877   4                                  break;      
1878   4                              case KEY_REDUCE: //减少
1879   4                                      if(pMenu[DisplayItemNum].ext_property & 0x01)
1880   4                                              {
1881   5                                                      ;
1882   5                                              }
1883   4                                      else
1884   4                                              {
1885   5                                                              TempInputData-=long_key_step;
1886   5                                                              if(TempInputData<pDataValue->m_min) //
1887   5                                                                      TempInputData = pDataValue->m_min; //pDataValue->m_min;
1888   5                                                      }
1889   4                                  break;      
1890   4                              case KEY_INCREASE: //增加
1891   4                                      if(pMenu[DisplayItemNum].ext_property & 0x01)
1892   4                                              {
1893   5                                                              ;
1894   5                                              }
1895   4                                      else
1896   4                                              {
1897   5                                                              TempInputData+=long_key_step;
1898   5                                                              temp_max = pDataValue->m_max;
1899   5                                                              if(TempInputData>temp_max) // temp_max
1900   5                                                                      TempInputData=temp_max;
1901   5                                                      }
1902   4                                  break;      
1903   4                              case KEY_ENT:
1904   4                                      if(!long_input_flag)
1905   4                                      {                       
1906   5                                                      TempInputData=StrToData(PasswordBuff,5,DataType);
1907   5                                                      if(TempInputData <= pDataValue->m_max && TempInputData >= pDataValue->m_min)
1908   5                                                      {
1909   6                                                      switch(INT16_SIZE)
1910   6                                                          {
1911   7                                                          case INT32_SIZE:
1912   7                                                              *(long *)pDataValue->m_data_vale = TempInputData;
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 32  

1913   7                                                              break;
1914   7                                                          case INT16_SIZE:
1915   7                                                              *(int *)pDataValue->m_data_vale = (int)TempInputData;
1916   7                                                              break;                  
1917   7                                                          case INT8_SIZE:
1918   7                                                              *(char *)pDataValue->m_data_vale = (char)TempInputData;
1919   7                                                              break;                  
1920   7                                                              }       
1921   6                                                              if(PasswordBuff[2] == '0')
1922   6                                                                      {
1923   7                                                                              PasswordBuff[2] = ' ';
1924   7                                                                              if(PasswordBuff[3] == '0') PasswordBuff[3] = ' ';
1925   7                                                                      }
1926   6                                                              LED_ShowNumber(&PasswordBuff[2],2);
1927   6      
1928   6      #if MENU_PASS_ON
1929   6                                                              //修改操作，校对密码是否与保存的一致
1930   6                                                              if( now_menu.menu_id == MENU_ID_10102)
1931   6                                                                      {
1932   7                                                                              TempB = DisplayItemNum / 2;
1933   7                                                                              //for(TempB = 0; TempB < PASS_LOCK_COUNT; TempB++)
1934   7                                                                                      {
1935   8                                                                                              if( (public_val.Disp_Dz_10103[TempB * 2] == public_val.Disp_Dz_10102[TempB * 2])
1936   8                                                                                                      && (public_val.Disp_Dz_10103[TempB * 2 + 1] == public_val.Disp_Dz_10102[TempB * 2 + 1]) 
1937   8                                                                                                      )
1938   8                                                                                                      {
1939   9                                                                                                              public_val.input_pass_mask |= 1 << TempB;
1940   9                                                                                                              public_val.Disp_Dz_10104[TempB] = 0;
1941   9                                                                                                              for(i = 0; i < TempB; i ++)                             //此段以下的都清除
1942   9                                                                                                                      public_val.Disp_Dz_10104[i] = 0;
1943   9                                                                                                              func_menu_update(MENU_ID_10104);
1944   9                                                                                                      }
1945   8                                                                                      }
1946   7                                                                              
1947   7                                                                                      DisplayState = ST_MENU;;                                                                        
1948   7                                                                      }
1949   6                                                              else
1950   6      #endif
1951   6                                                                      func_menu_update(now_menu.menu_id);
1952   6                                                                              
1953   6      
1954   6                                                              /* 如果将倒数第2个参数改为1则全部恢复默认参数 added by james for v19407 */
1955   6                                                              /*if ((DisplayItemNum == PARM_DEFAULT)
1956   6                                                                      && (TempInputData == 1))
1957   6                                                              {
1958   6                                                                      for (i = 0; i < MENU_ID_00000_MAX_ITEM; i++)
1959   6                                                                      {
1960   6                                                                              public_val.menu_parm[i] = iDefaultParm[i];
1961   6                                                                      }
1962   6                                                              }*/
1963   6                                                              
1964   6                                                              
1965   6                                                      }
1966   5                                      }
1967   4      
1968   4                                              if (now_menu.menu_id == 0)
1969   4                                                      {
1970   5                                                      Main_disp_other = 0;
1971   5                                                              DisplayBitNum = 4;
1972   5                                                              CycShowCount  = 0;
1973   5                                                              now_menu.menu_id = 888;
1974   5                                                              now_menu.event_flag = 1;
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 33  

1975   5                                                  DisplayItemNum = 0; 
1976   5                                                  DisplayState   = ST_MAIN;                                                                                   //返回主界面
1977   5                                                      }
1978   4                                              else
1979   4                                              DisplayState = ST_MENU;
1980   4                                              
1981   4                                  break;                      
1982   4                          }
1983   3      
1984   3                      if( flash_flag && !long_input_flag )  //闪烁功能
1985   3                      {       
1986   4                          LEDClearChar(DisplayBitNum,1);
1987   4                      }
1988   3                      else                    
1989   3                      {
1990   4                                              LEDShowCaption(DisplayItemNum);
1991   4                                      TempValue=DataToStr(&TempInputData,
1992   4                                                      INT32_SIZE,
1993   4                                                                      5,
1994   4                                                                      0,
1995   4                                                                      DisplayBuff,0,TY_D );   
1996   4      
1997   4                                      PasswordBuff[2]=DisplayBuff[TempValue];
1998   4                                      if(PasswordBuff[2] == ' ') PasswordBuff[2] = '0';
1999   4                                      PasswordBuff[3]=DisplayBuff[TempValue+1];
2000   4                                      if(PasswordBuff[3] == ' ') PasswordBuff[3] = '0';
2001   4                                      PasswordBuff[4]=DisplayBuff[TempValue+2];                                               
2002   4                                      LED_ShowNumber(&PasswordBuff[2],2);     
2003   4                                      
2004   4                      }
2005   3                  }   
2006   2                  break;      
2007   2                      
2008   2                      case ST_DISP_ERR:
2009   2                      {
2010   3                              if(public_val.ms_timer - now_menu.err_dsip_delay > DISP_ERR_TIMER )
2011   3                              {
2012   4                                      DisplayState = now_menu.chang_next_step;
2013   4                              }
2014   3                              else
2015   3                              {
2016   4                                      LEDShowFlashString("  Err",0);
2017   4                              }
2018   3                      }
2019   2                      break;
2020   2                      
2021   2                      default :
2022   2                      DisplayState = ST_MAIN;
2023   2                              //DIS_OPTIONING=0;
2024   2                  break;                              
2025   2                      
2026   2              }
2027   1              
2028   1          if(LCDDisplayState != DisplayState )//各个界面静态显示
2029   1              {
2030   2                      xdata char* paperLen = "纸长";
2031   2                      xdata char* paperNum = "捆数";
2032   2                      xdata char* paperTatol = "总数";
2033   2                      
2034   2                      if(g_iErrStatus == 1)
2035   2                                      g_iErrUIChange =1;
2036   2                      
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 34  

2037   2                      LCDDisplayState = DisplayState;
2038   2                      switch(LCDDisplayState)
2039   2                      {
2040   3                              case ST_MAIN:
2041   3                              {
2042   4                                      ClearLCDScreen(0);
2043   4                                      //GpuSend("SPG(52);\r\n");      
2044   4                                      GpuSend("W8DF(5,3,'111662226633333');\r\n");
2045   4                                      DELAY_US(UART2_DELAY);
2046   4                                      GpuSend("W8MU(0,0,80,80,1,2);\r\n");
2047   4                                      DELAY_US(UART2_DELAY);
2048   4                                      GpuSend("W8UE(1);\r\n");//查看串口发送的数据是正确的，必须两条才能起作用。液晶屏BUG
2049   4                                      GpuSend("W8UE(1);\r\n");
2050   4                                      DELAY_US(UART2_DELAY);
2051   4                                      sprintf(lcd_disp_buf,"DS64(1,2,'%s',15);\r\n",paperLen);
2052   4                                      GpuSend(lcd_disp_buf);
2053   4                                      DELAY_US(UART2_DELAY);
2054   4                                      GpuSend("SXY(0,0)\r\n");
2055   4                                      GpuSend("W8UE(3);\r\n");
2056   4                                      DELAY_US(UART2_DELAY);
2057   4                                      sprintf(lcd_disp_buf,"DS64(1,2,'%s',15);\r\n",paperNum);
2058   4                                      GpuSend(lcd_disp_buf);
2059   4                                      GpuSend("SXY(0,0)\r\n");
2060   4                                      DELAY_US(UART2_DELAY);
2061   4                                      GpuSend("W8UE(4);\r\n");
2062   4                                      sprintf(lcd_disp_buf,"DS64(1,1,'%s',15);\r\n",paperTatol);
2063   4                                      GpuSend(lcd_disp_buf);
2064   4                                      GpuSend("SXY(0,0)\r\n");
2065   4                                      DELAY_US(UART2_DELAY);
2066   4                              }       
2067   3                                      break;
2068   3                              case ST_PASSWORD:
2069   3                                      //GpuSend("SPG(53);\r\n");
2070   3      /*                              GpuSend("W8DF(5,3,'111662226633333');\r\n");
2071   3                                      DELAY_US(UART2_DELAY);
2072   3                                      GpuSend("W8MU(0,0,80,80,1,2);\r\n");
2073   3                                      DELAY_US(UART2_DELAY);
2074   3                                      GpuSend("SBC(51);\r\n");
2075   3                                      GpuSend("SBC(51);\r\n");
2076   3                                      DELAY_US(UART2_DELAY);
2077   3                                      GpuSend("DS64(1,7,'纸长',15);\r\n");
2078   3                                      DELAY_US(UART2_DELAY);
2079   3                                      GpuSend("SBC(52);\r\n");
2080   3                                      DELAY_US(UART2_DELAY);
2081   3                                      GpuSend("DS64(1,90,'捆数',15);\r\n");
2082   3                                      GpuSend("SBC(53);\r\n");
2083   3                                      GpuSend("DS64(1,170,'总数',15);\r\n");
2084   3                                      GpuSend("SBC(0);\r\n");
2085   3      */                              
2086   3                                      ClearLCDScreen(0);
2087   3                                      DELAY_US(UART2_DELAY);          
2088   3                                      GpuSend("DS48(1,86,'请输入密码:',15);\r\n");
2089   3                                      DELAY_US(UART2_DELAY);
2090   3                                      
2091   3                                      break;
2092   3                              case ST_MENU ://--参数查看画面
2093   3                                      ClearLCDScreen(0);
2094   3                                      if(now_menu.menu_id == 0 && now_menu.par_id ==0)//纸长
2095   3                                      {
2096   4                                              
2097   4                                              sprintf(lcd_disp_buf,"DS64(1,1,'%s',15);\r\n","1-");
2098   4                                              GpuSend(lcd_disp_buf);
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 35  

2099   4                                              DELAY_US(UART2_DELAY);
2100   4                                              
2101   4                                              sprintf(lcd_disp_buf,"DS64(1,100,'%s',15);\r\n",paperLen);
2102   4                                              GpuSend(lcd_disp_buf);
2103   4                                      }
2104   3                                      else if(now_menu.menu_id == 0 && now_menu.par_id ==1)//捆数
2105   3                                      {
2106   4                                              sprintf(lcd_disp_buf,"DS64(1,1,'%s',15);\r\n","2-");
2107   4                                              GpuSend(lcd_disp_buf);
2108   4                              
2109   4                                              sprintf(lcd_disp_buf,"DS64(1,100,'%s',15);\r\n",paperNum);
2110   4                                              GpuSend(lcd_disp_buf);
2111   4                                      }
2112   3                                      else
2113   3                                      {
2114   4                                              GpuSend("CLS(0);\r\n");
2115   4                                              MenuEditLook(now_menu.par_id + 10);                             
2116   4                                              pLCDDataValue=&pMenu[now_menu.par_id];
2117   4                                              TempInputData = *(int *)pLCDDataValue->m_data_vale;
2118   4                                              iCount = TempInputData;
2119   4                                              //sprintf(cLcd_data_buf,"%d ,%d ,%d,%d",iCount,(int)DisplayMenuTotal,(int)now_menu.par_id,(int)Displa
             -yItemNum);
2120   4                                              sprintf(cLcd_data_buf,"%d",(int)TempInputData);
2121   4                                              sprintf(lcd_disp_buf,"DS48(30,190,'%s',1);\r\n",cLcd_data_buf);
2122   4                                              GpuSend(lcd_disp_buf);
2123   4                                              
2124   4                                      }
2125   3                                      
2126   3                                      break;
2127   3                              case ST_DATA_INPUT://--数据输入画面
2128   3                                      
2129   3                                      break;
2130   3                              case ST_CODE_INPUT://--代码输入画面
2131   3                                      GpuSend("CLS(0);\r\n");
2132   3                                      DELAY_US(UART2_DELAY);
2133   3                                      sprintf(lcd_disp_buf,"DS64(200,100,'%s',15);\r\n","代码输入画面");
2134   3                                      GpuSend(lcd_disp_buf);
2135   3                                      DELAY_US(UART2_DELAY);
2136   3                                      break;
2137   3                              case ST_Show_Err://--错误提示画面
2138   3                                      GpuSend("CLS(0);\r\n");
2139   3                                      DELAY_US(UART2_DELAY);
2140   3                                      sprintf(lcd_disp_buf,"DS64(200,100,'%s',15);\r\n","错误提示");
2141   3                                      GpuSend(lcd_disp_buf);
2142   3                                      break;
2143   3                              case ST_ADJ://--直接调参数画面
2144   3                                      GpuSend("CLS(0);\r\n");
2145   3                                      DELAY_US(UART2_DELAY);
2146   3                                      sprintf(lcd_disp_buf,"DS64(200,100,'%s',15);\r\n","直接调参数");
2147   3                                      GpuSend(lcd_disp_buf);
2148   3                              
2149   3                                      break;
2150   3                              case ST_WAIT_VER://--等待返校结果
2151   3                                      GpuSend("CLS(0);\r\n");
2152   3                                      DELAY_US(UART2_DELAY);
2153   3                                      sprintf(lcd_disp_buf,"DS64(200,100,'%s',15);\r\n","等待返校结果");
2154   3                                      GpuSend(lcd_disp_buf);
2155   3                                      break;
2156   3                              case ST_DISP_ERR://延时显示修改出错
2157   3                                      GpuSend("CLS(0);\r\n");
2158   3                                      DELAY_US(UART2_DELAY);
2159   3                                      sprintf(lcd_disp_buf,"DS64(200,100,'%s',15);\r\n","延时显示修改出错");
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 36  

2160   3                                      GpuSend(lcd_disp_buf);
2161   3                                      break;
2162   3                              case ST_TEST://--测试参数设置  added by james for v19407
2163   3                                      GpuSend("CLS(0);\r\n");
2164   3                                      DELAY_US(UART2_DELAY);
2165   3                                      sprintf(lcd_disp_buf,"DS64(200,100,'%s',15);\r\n","测试参数设置");
2166   3                                      GpuSend(lcd_disp_buf);
2167   3                                      break;
2168   3                              case ST_LEARN://--学习模式
2169   3                                      GpuSend("CLS(0);\r\n");
2170   3                                      DELAY_US(UART2_DELAY);
2171   3                                      sprintf(lcd_disp_buf,"DS64(200,100,'%s',15);\r\n","学习模式");
2172   3                                      GpuSend(lcd_disp_buf);
2173   3                                      break;
2174   3                              case 0:
2175   3                              
2176   3                              break;
2177   3                      }
2178   2              }
2179   1              
2180   1      
2181   1              //错误标志 低4位:主控板错误号 高4位:操作板错误
2182   1              if(public_val.Err_Flag)
2183   1              {
2184   2                      if(g_iErrStatus == 0 || g_iErrUIChange == 1)//出现错误 或者 错误界面被更改
2185   2                      {
2186   3                              g_iErrStatus = 1;
2187   3                              g_iErrUIChange =0;
2188   3                              ClearLCDScreen(0);
2189   3                              switch(public_val.Err_Flag)
2190   3                              {
2191   4                                      default:
2192   4                                              GpuSend("PIC(0,0,18);\r\n");
2193   4                                              break;
2194   4                              }
2195   3                      }
2196   2                      
2197   2                      if(public_val.ms_timer -  g_iFlashOldTime> 500)
2198   2                      {
2199   3                              static xdata errFlashFlag=0;
2200   3                              if(g_pcStatus)
2201   3                              {
2202   4                                      LCDChildDisplayState =0;
2203   4                                      LCDDisplayState = 0x00;
2204   4                                      g_pcStatus = 0;
2205   4                              }
2206   3                              sprintf(lcd_disp_buf,"DS48(5,130,'0x%X',15);\r\n",(int)DisplayState);
2207   3                              GpuSend(lcd_disp_buf);
2208   3                              
2209   3                              //GpuSend("W8UE(2);\r\n");
2210   3                              if(public_val.Err_Flag > 0xf)
2211   3                              {       
2212   4                                      sprintf(lcd_disp_buf,"DS24(3,20,'%s',15);\r\n","主控板错误：");
2213   4                                      GpuSend(lcd_disp_buf);
2214   4                              }
2215   3                              else
2216   3                              {
2217   4                                      sprintf(lcd_disp_buf,"DS24(3,20,'%s',15);\r\n","操作板错误：");
2218   4                                      GpuSend(lcd_disp_buf);
2219   4                              }
2220   3                              if(errFlashFlag)
2221   3                              {       
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 37  

2222   4                                      sprintf(lcd_disp_buf,"DS48(5,80,'E--%d',1);\r\n",public_val.Err_Flag);
2223   4                                      GpuSend(lcd_disp_buf);
2224   4                              }
2225   3                              else
2226   3                              {
2227   4                                      sprintf(lcd_disp_buf,"DS48(5,80,'E--%d',15);\r\n",public_val.Err_Flag);
2228   4                                      GpuSend(lcd_disp_buf);
2229   4                              }
2230   3                              //GpuSend("SXY(0);\r\n");
2231   3                              errFlashFlag = !errFlashFlag;
2232   3                      }
2233   2                      
2234   2                      
2235   2              }
2236   1              else
2237   1              {
2238   2                      if(g_iErrStatus == 1)//从错误中恢复
2239   2                      {
2240   3                              LCDDisplayState = 0x00;
2241   3                              g_iErrStatus = 0;
2242   3                      }
2243   2              }
2244   1                      
2245   1              
2246   1              
2247   1              switch(DisplayState)//数据更新以及显示
2248   1              {
2249   2                      case ST_MAIN:
2250   2                              switch(LCDChildDisplayState)
2251   2                              {
2252   3                                      case 0:
2253   3                                              if(public_val.ms_timer - g_iInterfaceChangOldTime  > 500 && g_iErrStatus == 0)
2254   3                                              //if(now_menu.menu_id == 0 && now_menu.par_id ==1)//纸长
2255   3                                              {
2256   4                                                      g_iInterfaceChangOldTime = public_val.ms_timer;
2257   4                                                      pLCDDataValue=pItem[0].m_pcfg;
2258   4                                                      iLen = *(int *)pLCDDataValue->m_data_vale;
2259   4                                                      sprintf(cLcd_len_data_buf,"%d",iLen);
2260   4                                              
2261   4                                                      //else if(now_menu.menu_id == 0 && now_menu.par_id ==0)//捆数
2262   4                                                                                              
2263   4                                                      pLCDDataValue=pItem[0].m_pcfg + 1;
2264   4                                                      iCount= *(int *)pLCDDataValue->m_data_vale;
2265   4                                                      sprintf(cLcd_count_data_buf,"%d",iCount);
2266   4                                                      GpuSend("W8UE(1);\r\n");
2267   4                                                      sprintf(lcd_disp_buf,"DS64(130,2,'%s',15);\r\n",cLcd_len_data_buf);
2268   4                                                      GpuSend(lcd_disp_buf);
2269   4                                                      GpuSend("W8UE(3);\r\n");
2270   4                                                      sprintf(lcd_disp_buf,"DS64(130,1,'%s',15);\r\n",cLcd_count_data_buf);
2271   4                                                      GpuSend(lcd_disp_buf);
2272   4                                                      GpuSend("W8UE(4);\r\n");
2273   4                                                      sprintf(lcd_disp_buf,"DS64(130,1,'%d',15);\r\n",public_val.main_disp_val);
2274   4                                                      GpuSend(lcd_disp_buf);
2275   4                                                      GpuSend("SXY(0,0)\r\n");
2276   4                                              }
2277   3                                              if(g_pcStatus )
2278   3                                              {
2279   4                                                      
2280   4                                                      if(public_val.ms_timer -  g_iFlashOldTime> 500)
2281   4                                                      {
2282   5                                                              static xdata staFlashFlag=0;
2283   5                                                              g_iFlashOldTime = public_val.ms_timer;
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 38  

2284   5                                                              GpuSend("W8UE(2);\r\n");
2285   5                                                              if(staFlashFlag)
2286   5                                                              {       
2287   6                                                                      sprintf(lcd_disp_buf,"DS48(20,60,'%s',15);\r\n",g_pcStatus);
2288   6                                                                      GpuSend(lcd_disp_buf);                  
2289   6                                                              }
2290   5                                                              else
2291   5                                                              {
2292   6                                                                      sprintf(lcd_disp_buf,"DS48(20,60,'%s',1);\r\n",g_pcStatus);
2293   6                                                                      GpuSend(lcd_disp_buf);
2294   6                                                              }
2295   5                                                              GpuSend("SXY(0);\r\n");
2296   5                                                              staFlashFlag = !staFlashFlag;
2297   5                                                      }
2298   4                                                      
2299   4                                                      
2300   4                                              }
2301   3                                              break;
2302   3                                      case 1:
2303   3                                              if(g_iErrStatus   == 1)
2304   3                                                      break;
2305   3                                              ClearLCDScreen(0);
2306   3                                              GpuSend("SPG(57);\r\n");
2307   3                                              DELAY_US(10000);
2308   3                                              GpuSend("W8UE(1);\r\n");
2309   3                                              sprintf(cLcd_count_data_buf,"%s","16-5-12");
2310   3                                              sprintf(lcd_disp_buf,"DS64(130,2,'%s',15);\r\n",cLcd_count_data_buf);
2311   3                                              GpuSend(lcd_disp_buf);
2312   3                                              GpuSend("W8UE(2);\r\n");
2313   3                                              sprintf(cLcd_count_data_buf,"%d",public_val.version);
2314   3                                              sprintf(lcd_disp_buf,"DS64(130,1,'%s',15);\r\n",cLcd_count_data_buf);
2315   3                                              GpuSend(lcd_disp_buf);
2316   3                                              GpuSend("W8UE(3);\r\n");
2317   3                                              sprintf(lcd_disp_buf,"DS64(130,1,'%d',15);\r\n",public_val.main_disp_val);
2318   3                                              GpuSend(lcd_disp_buf);
2319   3                                              GpuSend("SXY(0,0)\r\n");
2320   3                                              g_iInterfaceChangOldTime = public_val.ms_timer;
2321   3                                              LCDChildDisplayState++;
2322   3                                              break;
2323   3                                      case 2:
2324   3                                              if(public_val.ms_timer - g_iInterfaceChangOldTime  > 2000)
2325   3                                              {
2326   4                                                      ClearLCDScreen(0);
2327   4                                                      GpuSend("SPG(60);\r\n");
2328   4                                                      g_iInterfaceChangOldTime  = public_val.ms_timer;
2329   4                                                      LCDChildDisplayState++;                                         
2330   4                                              }
2331   3                                              break;
2332   3                                      case 3:
2333   3                                              if(public_val.ms_timer - g_iInterfaceChangOldTime  > 5000)
2334   3                                              {
2335   4                                                      g_iInterfaceChangOldTime  = 0;
2336   4                                                      LCDChildDisplayState = 0;
2337   4                                                      LCDDisplayState = 0x00;//无画面显示，形成与DispplayState不同的状态，刷新界面。                                  
2338   4                                              }
2339   3                                              break;
2340   3                                      
2341   3                                      case 8://切纸询问界面
2342   3                                              if(g_iErrStatus   == 1)
2343   3                                                      break;
2344   3                                              if(public_val.ms_timer -  g_iFlashOldTime> 500)
2345   3                                              {
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 39  

2346   4                                                      static xdata int icutFlashFlag =0;
2347   4                                                      g_iFlashOldTime = public_val.ms_timer;
2348   4                                                      ClearLCDScreen(0);
2349   4                                                      if(icutFlashFlag)
2350   4                                                      {
2351   5                                                              GpuSend("SPG(62);\r\n");
2352   5                                                      }
2353   4                                                      else
2354   4                                                      {
2355   5                                                              GpuSend("SPG(63);\r\n");
2356   5                                                      }
2357   4                                                      icutFlashFlag = !icutFlashFlag;
2358   4                                              }
2359   3                                              
2360   3                                              switch(Key_Val)
2361   3                                              {
2362   4                                                      case 0xFFFF:
2363   4                                                      case 0x0000:
2364   4                                                              break;
2365   4                                                      case KEY_IO3://切纸                                                     
2366   4                                                              break;
2367   4                                                      case KEY_K4://确认
2368   4                                                      //清除显示
2369   4                                                              g_pcStatus = 0;
2370   4                                                              LCDChildDisplayState =0;
2371   4                                                              LCDDisplayState = 0x00;
2372   4                                                              break;
2373   4                                                      case KEY_K1://选择
2374   4                                                              //sprintf(lcd_disp_buf,"DS64(130,1,'%X',15);\r\n",Key_Val);
2375   4                                                              //GpuSend(lcd_disp_buf);
2376   4                                                              LCDChildDisplayState =0;
2377   4                                                              LCDDisplayState = 0x00;
2378   4                                                              break;
2379   4                                                      default:
2380   4                                                      break;
2381   4                                              }
2382   3                                              
2383   3                                              break;
2384   3                                      default:
2385   3                                              break;
2386   3                              }
2387   2                              
2388   2                              
2389   2                              break;
2390   2                      case ST_PASSWORD:
2391   2                              for(i=0 ;i < 5; i++)
2392   2                                      cLcd_data_buf[i] = PasswordBuff[i];
2393   2                              break;
2394   2                      case ST_MENU:
2395   2                              if(Key_Val == KEY_REDUCE || Key_Val == KEY_INCREASE)
2396   2                              {
2397   3                                      LCDDisplayState = 0x00;
2398   3                              }
2399   2                              break;
2400   2                              //now_menu.par_id
2401   2                      case ST_DATA_INPUT:
2402   2                              if(now_menu.menu_id == 0 && now_menu.par_id ==0)//纸长
2403   2                              {
2404   3                                      pLCDDataValue=&pMenu[0];
2405   3                                      iLen = *(int *)pLCDDataValue->m_data_vale;
2406   3                              //      sprintf(cLcd_data_buf,"%d",iLen);
2407   3                              }
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 40  

2408   2                              else if(now_menu.menu_id == 0 && now_menu.par_id ==1)//捆数
2409   2                              {                                       
2410   3                                      pLCDDataValue=&pMenu[1];
2411   3                                      iCount= *(int *)pLCDDataValue->m_data_vale;
2412   3                              //      sprintf(cLcd_data_buf,"%d",iCount);
2413   3                              }
2414   2                              iCount = TempInputData;
2415   2                              sprintf(cLcd_data_buf,"%d",iCount);
2416   2                              break;
2417   2              }
2418   1              
2419   1              
2420   1              if((DisplayState ==ST_PASSWORD  || DisplayState == ST_DATA_INPUT) && g_iErrStatus != 1)
2421   1              {
2422   2                      xdata char lcd_disp_buf[50*2] = {0};
2423   2                      xdata char old_disp;
2424   2                      if(public_val.ms_timer -  g_iFlashOldTime> 300)//闪烁频率
2425   2                      {
2426   3                              static xdata int flash = 0;
2427   3                              static xdata int oldDataLen =0;
2428   3      
2429   3                              g_iFlashOldTime = public_val.ms_timer;
2430   3                              
2431   3                              if(flash)
2432   3                              {
2433   4                                      if(strlen(cLcd_data_buf) >= oldDataLen )//当cLcd_data_buf中变成另一个参数时，会导致判断不准确。
2434   4                                      {
2435   5                                              sprintf(lcd_disp_buf,"DS48(30,190,'%s',1);\r\n",cLcd_data_buf);
2436   5                                              GpuSend(lcd_disp_buf);
2437   5                                      }
2438   4                                      else
2439   4                                      {
2440   5                                              sprintf(lcd_disp_buf,"DS48(30,190,'%s  ',1);\r\n",cLcd_data_buf);
2441   5                                              GpuSend(lcd_disp_buf);
2442   5                                      }
2443   4                              }
2444   3                              else
2445   3                              {
2446   4                                      if(  DisplayState ==ST_PASSWORD )
2447   4                                      {
2448   5                                              old_disp = cLcd_data_buf[DisplayBitNum];
2449   5                                              cLcd_data_buf[DisplayBitNum] = '_';
2450   5                                      }
2451   4                                      else
2452   4                                      {
2453   5                                              i=0;
2454   5                                              while(cLcd_data_buf[i] != '\0')
2455   5                                                      i++;
2456   5                                              i--;
2457   5                                              old_disp = cLcd_data_buf[i];
2458   5                                              cLcd_data_buf[i]='_';
2459   5                                      }
2460   4                                      sprintf(lcd_disp_buf,"DS48(30,190,'%s  ',1);\r\n",cLcd_data_buf);//不分情况直接多输出两个空格，
2461   4                                      GpuSend(lcd_disp_buf);
2462   4                                      if(  DisplayState ==ST_PASSWORD )
2463   4                                      {
2464   5                                              cLcd_data_buf[DisplayBitNum] = old_disp;
2465   5                                      }
2466   4                                      else
2467   4                                      {
2468   5                                              cLcd_data_buf[i]=old_disp;
2469   5                                      }
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 41  

2470   4                              }
2471   3                              flash = !flash;
2472   3                      }
2473   2              }
2474   1      
2475   1      
2476   1                      
2477   1      
2478   1              if(!UpdateState)
2479   1              {
2480   2                      UpdateState = 1;
2481   2                      UpdateCountB = public_val.ms_timer;
2482   2              }
2483   1              else
2484   1              {
2485   2                      if(public_val.ms_timer - UpdateCountB > 100)
2486   2                      {
2487   3                              flash_flag = !flash_flag;
2488   3                              UpdateState = 0;
2489   3                      }               
2490   2              }
2491   1      
2492   1      
2493   1              switch(war_bell_step)  /* 蜂鸣器报警处理 */
2494   1              {
2495   2                      case 1:
2496   2                              war_bell_delay = public_val.ms_timer;
2497   2                              Bell_flag |= 0x02;
2498   2                              war_bell_step = 10;
2499   2                      break;
2500   2                      case 10:
2501   2                              iBellOnTime = (cPauseBell == 0) ? 500 : 50;
2502   2                              //iBellOnTime = (cPauseBell == 0) ? 2000 : 50;
2503   2                              if(public_val.ms_timer - war_bell_delay > iBellOnTime) //响的时间
2504   2                                      {
2505   3                                              war_bell_delay = public_val.ms_timer;
2506   3                                              Bell_flag &= 0xfd;
2507   3                                              war_bell_step = 20;
2508   3                                      }
2509   2                      break;
2510   2                      case 20:
2511   2                              iBellOffTime = (cPauseBell == 0) ? 2000 : 2000;                 
2512   2                              //iBellOffTime = (cPauseBell == 0) ? 200 : 2000;                        
2513   2                              if(public_val.ms_timer - war_bell_delay > iBellOffTime) //不响的时间
2514   2                                      {
2515   3                                              war_bell_delay = public_val.ms_timer;
2516   3                                              war_bell_step = 30;
2517   3                                      }                       
2518   2                      break;
2519   2                      case 30:
2520   2                              if((!public_val.Err_Flag) 
2521   2                                 && (!(public_val.Work_Pause_Flag & 0x80))
2522   2                                 && (!public_val.Bell_Flag))  /* added for v19416 */
2523   2                                      {
2524   3                                              war_bell_step = 0;   /* 无报错 */
2525   3                                      }
2526   2                              else
2527   2                                      {
2528   3                                              war_bell_step = 1;
2529   3                                      }
2530   2                      break;
2531   2              }
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 42  

2532   1              
2533   1              if(Bell_flag)
2534   1              {
2535   2                      BELL = 1;
2536   2              }
2537   1              else
2538   1              {
2539   2                      BELL = 0;
2540   2              }
2541   1              
2542   1      
2543   1      //      TM1637_Write();
2544   1      
2545   1              
2546   1      }
*** WARNING C280 IN LINE 842 OF LED_DISPLAY.C: 'iTatol': unreferenced local variable
2547                          
2548          
2549          /*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
2550          功能：整形变字符型
2551          
2552          参数：nBit:整数位个数，nPoint:小数位个数  ,nFlag==1整数位前的0以空格补充
2553          
2554          返回值：高位空格数
2555          ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
2556          static char DataToStr(void * const pData,char size,char nBit,char nPoint,char *string,char nFlag,char nTyp
             -e)
2557          {       
2558   1              long DataS32Bit;
2559   1              char spaces;
2560   1              char Temp,module;
2561   1              char SignZero;//负数标志位,  >0: 0,  <0: 1
2562   1              
2563   1              if(size==0 || size>4)//判断size的合理性
2564   1                  return 0;
2565   1              size--;
2566   1      //      if( ( *((char *)(pData)+size) ) & 0x80 )//判断最高位是否为1
2567   1      //          SignZero=1;
2568   1      //      else
2569   1                  SignZero=0; 
2570   1                  
2571   1          DataS32Bit=0;
2572   1              if(size==3)//LONG型数据
2573   1              {                           
2574   2                      if(SignZero)
2575   2                          *((long *)&DataS32Bit) = 0 - *((long *)pData);
2576   2                      else
2577   2                          *((long *)&DataS32Bit) = *((long *)pData);
2578   2              }       
2579   1              else if(size==1)//INT型数据
2580   1              {
2581   2                  if(SignZero)
2582   2                          *((int *)&DataS32Bit) = 0 - *((int *)pData);                                                
2583   2                      else
2584   2                          *((int *)&DataS32Bit) = *((int *)pData);    
2585   2              }       
2586   1              else if(size==0)//char型数据
2587   1              {
2588   2                  if(SignZero)
2589   2                          *((char *)&DataS32Bit) = 0 - *((char *)pData);
2590   2                      else
2591   2                          *((char *)&DataS32Bit) = *((char *)pData);
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 43  

2592   2              }
2593   1              else
2594   1                      return 0;       
2595   1              
2596   1              switch(nType){
2597   2              case TY_B:
2598   2                      module=2;
2599   2                      break;
2600   2              case TY_D:
2601   2              case TY_RD:
2602   2              case TY_D_A:
2603   2              case TY_D_L:
2604   2              module=10;
2605   2                      break;
2606   2              case TY_H:
2607   2              module=16;
2608   2                      break;
2609   2              }
2610   1              
2611   1          spaces = 3-(nPoint+nBit);
2612   1              Temp = nPoint+nBit;
2613   1              if(Temp<3)
2614   1              {
2615   2                  nBit += (3-Temp);
2616   2                      Temp=3;
2617   2              }
2618   1                      
2619   1              do
2620   1          {
2621   2              if(Temp!=nBit || nFlag)
2622   2              {
2623   3                  string[Temp]='0'+(char)(DataS32Bit%(module));
2624   3                  DataS32Bit/=module;
2625   3              }
2626   2              else 
2627   2                      {
2628   3                              if(nPoint!=0)
2629   3                                  string[Temp]='.';
2630   3                              else
2631   3                                  string[Temp]=' ';
2632   3                      }
2633   2              
2634   2          }while( Temp-- >0 );
2635   1              
2636   1              if(nFlag)//nFlag==1整数位前的0以空格补充
2637   1              {
2638   2                  if(SignZero && spaces<3)
2639   2                          string[spaces]='-';
2640   2                      return 0;
2641   2          }
2642   1              
2643   1              Temp=0;
2644   1              spaces=0;
2645   1          do
2646   1          {
2647   2             if(string[Temp]=='0' && (Temp+1<nBit)) 
2648   2             {
2649   3                         string[Temp]=' ';
2650   3                         spaces++;
2651   3                 }
2652   2             else
2653   2                 {
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 44  

2654   3                 break;
2655   3                 }
2656   2             Temp++;
2657   2          }while(1);
2658   1              if(SignZero)
2659   1              {
2660   2                  string[--spaces]='-';
2661   2              }
2662   1              Temp=nPoint+nBit-spaces;
2663   1              if(Temp<3)
2664   1                  spaces -= (3-Temp);
2665   1              return spaces;
2666   1      }
2667          
2668          /*++++++++++++++++++++++++++++++++++++++++++++++++++++
2669          功能：需要一个函数将字符化整形
2670          
2671          参数：len 为字符长度
2672          
2673          返回值：无
2674          ++++++++++++++++++++++++++++++++++++++++++++++++++++*/
2675          static long StrToData(char *string,char len,char nType)
2676          {       
2677   1          unsigned long x,bi;     
2678   1          char i,module;
2679   1      
2680   1          switch(nType){
2681   2              case TY_B:
2682   2                      module=2;
2683   2                      break;
2684   2              case TY_D:
2685   2              module=10;
2686   2                      break;
2687   2              case TY_H:
2688   2              module=16;
2689   2                      break;
2690   2              }
2691   1              x=0;
2692   1              bi=1;
2693   1              for(i=len;i>0;)
2694   1          {
2695   2              i--;
2696   2                      if(string[i] >= '0' && string[i]<=0x3F)
2697   2                      {
2698   3                         x+=(string[i] - '0')*bi;
2699   3                         bi*=module;
2700   3              }
2701   2              }
2702   1              if(string[0]=='-' || string[1]=='-' || string[2]=='-' )//负数
2703   1                  return (0-x);
2704   1              else
2705   1                  return x;
2706   1      
2707   1      }
2708          void MenuEditLook(unsigned char cDisplayItemNum)
2709          {
2710   1              
2711   1              //unsigned char DisplayItemNum;
2712   1              switch(cDisplayItemNum)
2713   1              {
2714   2                      case 10:
2715   2                              GpuSend("SPG(31);\r\n");                
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 45  

2716   2                      break;
2717   2              
2718   2                      case 11:
2719   2                              GpuSend("SPG(32);\r\n");                
2720   2                      break;
2721   2                      
2722   2                      case 12:
2723   2                              GpuSend("SPG(33);\r\n");                
2724   2                      break;
2725   2                      
2726   2                      case 13:
2727   2                              GpuSend("SPG(34);\r\n");                
2728   2                      break;
2729   2                      
2730   2                      case 14:
2731   2                              GpuSend("SPG(35);\r\n");                
2732   2                      break;
2733   2                      
2734   2                      case 15:
2735   2                              GpuSend("SPG(36);\r\n");                
2736   2                      break;
2737   2                      
2738   2                      case 16:
2739   2                              GpuSend("SPG(37);\r\n");                
2740   2                      break;
2741   2                      
2742   2                      case 17:
2743   2                              GpuSend("SPG(38);\r\n");                
2744   2                      break;
2745   2                      
2746   2                      case 18:
2747   2                              GpuSend("SPG(39);\r\n");                
2748   2                      break;
2749   2                      
2750   2                      case 19:
2751   2                              GpuSend("SPG(40);\r\n");                
2752   2                      break;
2753   2                      
2754   2                      
2755   2                      case 20:
2756   2                              GpuSend("SPG(41);\r\n");                
2757   2                      break;
2758   2                      
2759   2                      
2760   2                      case 21:
2761   2                              GpuSend("SPG(42);\r\n");                
2762   2                      break;
2763   2                      
2764   2                      case 22:
2765   2                              GpuSend("SPG(43);\r\n");                
2766   2                      break;
2767   2                      
2768   2                      case 23:
2769   2                              GpuSend("SPG(44);\r\n");                
2770   2                      break;
2771   2                      
2772   2                      case 24:
2773   2                              GpuSend("SPG(45);\r\n");                
2774   2                      break;
2775   2                      
2776   2                      case 25:
2777   2                              GpuSend("SPG(46);\r\n");                
C51 COMPILER V9.00   LED_DISPLAY                                                           05/12/2016 17:23:54 PAGE 46  

2778   2                      break;
2779   2                      
2780   2                      case 26:
2781   2                              GpuSend("SPG(47);\r\n");                
2782   2                      break;
2783   2                      
2784   2                      case 27:
2785   2                              GpuSend("SPG(48);\r\n");                
2786   2                      break;
2787   2                      
2788   2                      case 28:
2789   2                              GpuSend("SPG(49);\r\n");                
2790   2                      break;
2791   2                      
2792   2                      case 29:
2793   2                              GpuSend("SPG(50);\r\n");                
2794   2                      break;
2795   2                      default:
2796   2                              GpuSend("SPG(31);\r\n");
2797   2                              break;
2798   2              
2799   2              }
2800   1              
2801   1              DELAY_US(UART1s_DELAY);
2802   1      }
2803          
2804          void ClearLCDScreen(int c)
2805          {
2806   1              xdata char buf[20];
2807   1              DELAY_US(1000);
2808   1              sprintf(buf,"CLS(%d);\r\n",c);
2809   1              GpuSend(buf);
2810   1              DELAY_US(1000);
2811   1              
2812   1      }
2813          
2814          void TextOut(char *text)
2815          {
2816   1      //      xdata char lcd_disp_buf[50*2] = {0};
2817   1      //      sprintf(lcd_disp_buf,"DS%d(%d,%d,'%s',%d);\r\n",fontsize,x,y,text,colour);
2818   1      //      GpuSend(lcd_disp_buf);
2819   1      }
*** WARNING C280 IN LINE 2814 OF LED_DISPLAY.C: 'text': unreferenced local variable
2820          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =  15412    ----
   CONSTANT SIZE    =   1820    ----
   XDATA SIZE       =   1071     334
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
